// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 183, col: 1, offset: 5165},
			expr: &actionExpr{
				pos: position{line: 183, col: 10, offset: 5174},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 183, col: 10, offset: 5174},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 183, col: 10, offset: 5174},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 10, offset: 5174},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 17, offset: 5181},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 32, offset: 5196},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 52, offset: 5216},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 65, offset: 5229},
								expr: &ruleRefExpr{
									pos:  position{line: 183, col: 66, offset: 5230},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 80, offset: 5244},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 95, offset: 5259},
								expr: &ruleRefExpr{
									pos:  position{line: 183, col: 96, offset: 5260},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 183, col: 119, offset: 5283},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 119, offset: 5283},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 126, offset: 5290},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 254, col: 1, offset: 7491},
			expr: &actionExpr{
				pos: position{line: 254, col: 23, offset: 7513},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 254, col: 23, offset: 7513},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 254, col: 23, offset: 7513},
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 23, offset: 7513},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 35, offset: 7525},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 42, offset: 7532},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 258, col: 1, offset: 7573},
			expr: &actionExpr{
				pos: position{line: 258, col: 16, offset: 7588},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 258, col: 16, offset: 7588},
					exprs: []any{
						&notExpr{
							pos: position{line: 258, col: 16, offset: 7588},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 18, offset: 7590},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 258, col: 26, offset: 7598},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 26, offset: 7598},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 38, offset: 7610},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 45, offset: 7617},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 262, col: 1, offset: 7658},
			expr: &actionExpr{
				pos: position{line: 262, col: 16, offset: 7673},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 262, col: 16, offset: 7673},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 262, col: 16, offset: 7673},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 21, offset: 7678},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 262, col: 28, offset: 7685},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 262, col: 28, offset: 7685},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 262, col: 42, offset: 7699},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 267, col: 1, offset: 7775},
			expr: &actionExpr{
				pos: position{line: 267, col: 25, offset: 7799},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 267, col: 25, offset: 7799},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 267, col: 32, offset: 7806},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 267, col: 32, offset: 7806},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 51, offset: 7825},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 69, offset: 7843},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 81, offset: 7855},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 94, offset: 7868},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 106, offset: 7880},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 117, offset: 7891},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 134, offset: 7908},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 148, offset: 7922},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 165, offset: 7939},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 184, offset: 7958},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 197, offset: 7971},
								name: "SortBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 272, col: 1, offset: 8062},
			expr: &actionExpr{
				pos: position{line: 272, col: 21, offset: 8082},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 272, col: 21, offset: 8082},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 272, col: 21, offset: 8082},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 26, offset: 8087},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 37, offset: 8098},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 40, offset: 8101},
								expr: &choiceExpr{
									pos: position{line: 272, col: 41, offset: 8102},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 272, col: 41, offset: 8102},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 272, col: 47, offset: 8108},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 53, offset: 8114},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 68, offset: 8129},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 75, offset: 8136},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 290, col: 1, offset: 8640},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 8659},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 8659},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 290, col: 20, offset: 8659},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 25, offset: 8664},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 290, col: 35, offset: 8674},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 40, offset: 8679},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 56, offset: 8695},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 65, offset: 8704},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 66, offset: 8705},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 81, offset: 8720},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 89, offset: 8728},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 90, offset: 8729},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 343, col: 1, offset: 10463},
			expr: &actionExpr{
				pos: position{line: 343, col: 17, offset: 10479},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 343, col: 17, offset: 10479},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 343, col: 24, offset: 10486},
						expr: &ruleRefExpr{
							pos:  position{line: 343, col: 25, offset: 10487},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 381, col: 1, offset: 11928},
			expr: &actionExpr{
				pos: position{line: 381, col: 16, offset: 11943},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 381, col: 16, offset: 11943},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 381, col: 16, offset: 11943},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 22, offset: 11949},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 32, offset: 11959},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 47, offset: 11974},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 53, offset: 11980},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 381, col: 58, offset: 11985},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 381, col: 58, offset: 11985},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 76, offset: 12003},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 94, offset: 12021},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 386, col: 1, offset: 12126},
			expr: &actionExpr{
				pos: position{line: 386, col: 19, offset: 12144},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 19, offset: 12144},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 386, col: 27, offset: 12152},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 386, col: 27, offset: 12152},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 38, offset: 12163},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 58, offset: 12183},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 68, offset: 12193},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 394, col: 1, offset: 12383},
			expr: &actionExpr{
				pos: position{line: 394, col: 17, offset: 12399},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 394, col: 17, offset: 12399},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 394, col: 17, offset: 12399},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 20, offset: 12402},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 27, offset: 12409},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 405, col: 1, offset: 12758},
			expr: &actionExpr{
				pos: position{line: 405, col: 15, offset: 12772},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 405, col: 15, offset: 12772},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 405, col: 15, offset: 12772},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 12782},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 405, col: 34, offset: 12791},
								expr: &seqExpr{
									pos: position{line: 405, col: 35, offset: 12792},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 405, col: 35, offset: 12792},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 405, col: 45, offset: 12802},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 64, offset: 12821},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 68, offset: 12825},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 433, col: 1, offset: 13404},
			expr: &actionExpr{
				pos: position{line: 433, col: 17, offset: 13420},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 433, col: 17, offset: 13420},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 433, col: 17, offset: 13420},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 23, offset: 13426},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 433, col: 36, offset: 13439},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 433, col: 41, offset: 13444},
								expr: &seqExpr{
									pos: position{line: 433, col: 42, offset: 13445},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 433, col: 43, offset: 13446},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 433, col: 43, offset: 13446},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 433, col: 49, offset: 13452},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 433, col: 56, offset: 13459},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 451, col: 1, offset: 13836},
			expr: &actionExpr{
				pos: position{line: 451, col: 17, offset: 13852},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 451, col: 17, offset: 13852},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 451, col: 17, offset: 13852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 23, offset: 13858},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 36, offset: 13871},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 41, offset: 13876},
								expr: &seqExpr{
									pos: position{line: 451, col: 42, offset: 13877},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 451, col: 42, offset: 13877},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 451, col: 45, offset: 13880},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 469, col: 1, offset: 14245},
			expr: &choiceExpr{
				pos: position{line: 469, col: 17, offset: 14261},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 469, col: 17, offset: 14261},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 469, col: 17, offset: 14261},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 469, col: 17, offset: 14261},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 469, col: 25, offset: 14269},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 25, offset: 14269},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 30, offset: 14274},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 36, offset: 14280},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 480, col: 5, offset: 14576},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 480, col: 5, offset: 14576},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 12, offset: 14583},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 484, col: 1, offset: 14624},
			expr: &choiceExpr{
				pos: position{line: 484, col: 17, offset: 14640},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 484, col: 17, offset: 14640},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 484, col: 17, offset: 14640},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 484, col: 17, offset: 14640},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 25, offset: 14648},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 32, offset: 14655},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 45, offset: 14668},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 5, offset: 14705},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 486, col: 5, offset: 14705},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 10, offset: 14710},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 492, col: 1, offset: 14868},
			expr: &actionExpr{
				pos: position{line: 492, col: 15, offset: 14882},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 492, col: 15, offset: 14882},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 492, col: 21, offset: 14888},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 492, col: 21, offset: 14888},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 44, offset: 14911},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 68, offset: 14935},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 497, col: 1, offset: 15076},
			expr: &actionExpr{
				pos: position{line: 497, col: 19, offset: 15094},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 497, col: 19, offset: 15094},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 497, col: 19, offset: 15094},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 24, offset: 15099},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 38, offset: 15113},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 45, offset: 15120},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 68, offset: 15143},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 78, offset: 15153},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 79, offset: 15154},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 585, col: 1, offset: 17897},
			expr: &actionExpr{
				pos: position{line: 585, col: 27, offset: 17923},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 585, col: 27, offset: 17923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 585, col: 27, offset: 17923},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 33, offset: 17929},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 51, offset: 17947},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 585, col: 56, offset: 17952},
								expr: &seqExpr{
									pos: position{line: 585, col: 57, offset: 17953},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 585, col: 57, offset: 17953},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 585, col: 63, offset: 17959},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 614, col: 1, offset: 18693},
			expr: &actionExpr{
				pos: position{line: 614, col: 22, offset: 18714},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 614, col: 22, offset: 18714},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 614, col: 29, offset: 18721},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 614, col: 29, offset: 18721},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 614, col: 45, offset: 18737},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 618, col: 1, offset: 18775},
			expr: &actionExpr{
				pos: position{line: 618, col: 18, offset: 18792},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 618, col: 18, offset: 18792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 618, col: 18, offset: 18792},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 23, offset: 18797},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 39, offset: 18813},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 618, col: 53, offset: 18827},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 53, offset: 18827},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 632, col: 1, offset: 19166},
			expr: &actionExpr{
				pos: position{line: 632, col: 18, offset: 19183},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 632, col: 18, offset: 19183},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 632, col: 18, offset: 19183},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 21, offset: 19186},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 27, offset: 19192},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 640, col: 1, offset: 19321},
			expr: &actionExpr{
				pos: position{line: 640, col: 14, offset: 19334},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 14, offset: 19334},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 640, col: 22, offset: 19342},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 640, col: 22, offset: 19342},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 640, col: 35, offset: 19355},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 36, offset: 19356},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 682, col: 1, offset: 20876},
			expr: &actionExpr{
				pos: position{line: 682, col: 13, offset: 20888},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 682, col: 13, offset: 20888},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 682, col: 13, offset: 20888},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 19, offset: 20894},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 31, offset: 20906},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 43, offset: 20918},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 49, offset: 20924},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 53, offset: 20928},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 687, col: 1, offset: 21041},
			expr: &actionExpr{
				pos: position{line: 687, col: 16, offset: 21056},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 687, col: 16, offset: 21056},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 687, col: 24, offset: 21064},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 687, col: 24, offset: 21064},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 36, offset: 21076},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 49, offset: 21089},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 61, offset: 21101},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 696, col: 1, offset: 21450},
			expr: &actionExpr{
				pos: position{line: 696, col: 15, offset: 21464},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 696, col: 15, offset: 21464},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 696, col: 27, offset: 21476},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 704, col: 1, offset: 21701},
			expr: &actionExpr{
				pos: position{line: 704, col: 16, offset: 21716},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 704, col: 16, offset: 21716},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 704, col: 16, offset: 21716},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 704, col: 25, offset: 21725},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 704, col: 31, offset: 21731},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 42, offset: 21742},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 711, col: 1, offset: 21888},
			expr: &actionExpr{
				pos: position{line: 711, col: 15, offset: 21902},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 711, col: 15, offset: 21902},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 711, col: 15, offset: 21902},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 24, offset: 21911},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 711, col: 40, offset: 21927},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 50, offset: 21937},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 724, col: 1, offset: 22255},
			expr: &actionExpr{
				pos: position{line: 724, col: 14, offset: 22268},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 724, col: 14, offset: 22268},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 724, col: 24, offset: 22278},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 724, col: 24, offset: 22278},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 33, offset: 22287},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 42, offset: 22296},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 49, offset: 22303},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 54, offset: 22308},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 61, offset: 22315},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 69, offset: 22323},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 78, offset: 22332},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 729, col: 1, offset: 22454},
			expr: &actionExpr{
				pos: position{line: 729, col: 14, offset: 22467},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 729, col: 14, offset: 22467},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 729, col: 14, offset: 22467},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 729, col: 20, offset: 22473},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 28, offset: 22481},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 34, offset: 22487},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 729, col: 41, offset: 22494},
								expr: &choiceExpr{
									pos: position{line: 729, col: 42, offset: 22495},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 729, col: 42, offset: 22495},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 729, col: 50, offset: 22503},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 61, offset: 22514},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 76, offset: 22529},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 86, offset: 22539},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 753, col: 1, offset: 23120},
			expr: &actionExpr{
				pos: position{line: 753, col: 19, offset: 23138},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 753, col: 19, offset: 23138},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 753, col: 19, offset: 23138},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 24, offset: 23143},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 38, offset: 23157},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 786, col: 1, offset: 24135},
			expr: &actionExpr{
				pos: position{line: 786, col: 18, offset: 24152},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 786, col: 18, offset: 24152},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 786, col: 18, offset: 24152},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 786, col: 23, offset: 24157},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 786, col: 23, offset: 24157},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 33, offset: 24167},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 43, offset: 24177},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 49, offset: 24183},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 50, offset: 24184},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 67, offset: 24201},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 786, col: 78, offset: 24212},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 786, col: 78, offset: 24212},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 84, offset: 24218},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 99, offset: 24233},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 108, offset: 24242},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 109, offset: 24243},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 120, offset: 24254},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 128, offset: 24262},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 129, offset: 24263},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 828, col: 1, offset: 25348},
			expr: &choiceExpr{
				pos: position{line: 828, col: 19, offset: 25366},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 828, col: 19, offset: 25366},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 828, col: 19, offset: 25366},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 828, col: 19, offset: 25366},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 828, col: 25, offset: 25372},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 32, offset: 25379},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 3, offset: 25433},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 831, col: 3, offset: 25433},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 831, col: 3, offset: 25433},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 831, col: 9, offset: 25439},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 17, offset: 25447},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 23, offset: 25453},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 30, offset: 25460},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 836, col: 1, offset: 25558},
			expr: &actionExpr{
				pos: position{line: 836, col: 21, offset: 25578},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 836, col: 21, offset: 25578},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 836, col: 28, offset: 25585},
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 29, offset: 25586},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 885, col: 1, offset: 27148},
			expr: &actionExpr{
				pos: position{line: 885, col: 20, offset: 27167},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 885, col: 20, offset: 27167},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 885, col: 20, offset: 27167},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 26, offset: 27173},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 36, offset: 27183},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 55, offset: 27202},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 61, offset: 27208},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 67, offset: 27214},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 890, col: 1, offset: 27323},
			expr: &actionExpr{
				pos: position{line: 890, col: 23, offset: 27345},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 23, offset: 27345},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 890, col: 31, offset: 27353},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 890, col: 31, offset: 27353},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 46, offset: 27368},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 60, offset: 27382},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 73, offset: 27395},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 85, offset: 27407},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 102, offset: 27424},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 898, col: 1, offset: 27611},
			expr: &choiceExpr{
				pos: position{line: 898, col: 13, offset: 27623},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 898, col: 13, offset: 27623},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 898, col: 13, offset: 27623},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 898, col: 13, offset: 27623},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 898, col: 16, offset: 27626},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 26, offset: 27636},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 3, offset: 27693},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 901, col: 3, offset: 27693},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 16, offset: 27706},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 905, col: 1, offset: 27764},
			expr: &actionExpr{
				pos: position{line: 905, col: 15, offset: 27778},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 905, col: 15, offset: 27778},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 905, col: 15, offset: 27778},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 20, offset: 27783},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 905, col: 30, offset: 27793},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 40, offset: 27803},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 925, col: 1, offset: 28371},
			expr: &actionExpr{
				pos: position{line: 925, col: 14, offset: 28384},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 925, col: 14, offset: 28384},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 925, col: 14, offset: 28384},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 23, offset: 28393},
								expr: &seqExpr{
									pos: position{line: 925, col: 24, offset: 28394},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 925, col: 24, offset: 28394},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 30, offset: 28400},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 48, offset: 28418},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 57, offset: 28427},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 58, offset: 28428},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 73, offset: 28443},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 83, offset: 28453},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 84, offset: 28454},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 101, offset: 28471},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 110, offset: 28480},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 111, offset: 28481},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 126, offset: 28496},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 139, offset: 28509},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 140, offset: 28510},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 982, col: 1, offset: 30248},
			expr: &actionExpr{
				pos: position{line: 982, col: 19, offset: 30266},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 982, col: 19, offset: 30266},
					exprs: []any{
						&notExpr{
							pos: position{line: 982, col: 19, offset: 30266},
							expr: &litMatcher{
								pos:        position{line: 982, col: 21, offset: 30268},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 982, col: 31, offset: 30278},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 37, offset: 30284},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 986, col: 1, offset: 30321},
			expr: &actionExpr{
				pos: position{line: 986, col: 19, offset: 30339},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 986, col: 19, offset: 30339},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 986, col: 19, offset: 30339},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 986, col: 25, offset: 30345},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 31, offset: 30351},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 986, col: 46, offset: 30366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 986, col: 51, offset: 30371},
								expr: &seqExpr{
									pos: position{line: 986, col: 52, offset: 30372},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 986, col: 52, offset: 30372},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 986, col: 58, offset: 30378},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 986, col: 73, offset: 30393},
											expr: &ruleRefExpr{
												pos:  position{line: 986, col: 74, offset: 30394},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1004, col: 1, offset: 30922},
			expr: &actionExpr{
				pos: position{line: 1004, col: 17, offset: 30938},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 17, offset: 30938},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1004, col: 24, offset: 30945},
						expr: &ruleRefExpr{
							pos:  position{line: 1004, col: 25, offset: 30946},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1044, col: 1, offset: 32212},
			expr: &actionExpr{
				pos: position{line: 1044, col: 16, offset: 32227},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 16, offset: 32227},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1044, col: 16, offset: 32227},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 22, offset: 32233},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 32, offset: 32243},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 47, offset: 32258},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 51, offset: 32262},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 57, offset: 32268},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1049, col: 1, offset: 32377},
			expr: &actionExpr{
				pos: position{line: 1049, col: 19, offset: 32395},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 19, offset: 32395},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1049, col: 27, offset: 32403},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1049, col: 27, offset: 32403},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1049, col: 43, offset: 32419},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1049, col: 57, offset: 32433},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1057, col: 1, offset: 32618},
			expr: &actionExpr{
				pos: position{line: 1057, col: 22, offset: 32639},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 22, offset: 32639},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1057, col: 22, offset: 32639},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 39, offset: 32656},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 53, offset: 32670},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1062, col: 1, offset: 32778},
			expr: &actionExpr{
				pos: position{line: 1062, col: 17, offset: 32794},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 17, offset: 32794},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1062, col: 17, offset: 32794},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 23, offset: 32800},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 41, offset: 32818},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1062, col: 46, offset: 32823},
								expr: &seqExpr{
									pos: position{line: 1062, col: 47, offset: 32824},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1062, col: 47, offset: 32824},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1062, col: 62, offset: 32839},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1077, col: 1, offset: 33197},
			expr: &actionExpr{
				pos: position{line: 1077, col: 22, offset: 33218},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1077, col: 22, offset: 33218},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1077, col: 31, offset: 33227},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1077, col: 31, offset: 33227},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1077, col: 59, offset: 33255},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1081, col: 1, offset: 33314},
			expr: &actionExpr{
				pos: position{line: 1081, col: 33, offset: 33346},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 33, offset: 33346},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1081, col: 33, offset: 33346},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1081, col: 47, offset: 33360},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1081, col: 47, offset: 33360},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1081, col: 53, offset: 33366},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1081, col: 59, offset: 33372},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 63, offset: 33376},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 69, offset: 33382},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1096, col: 1, offset: 33657},
			expr: &actionExpr{
				pos: position{line: 1096, col: 30, offset: 33686},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 30, offset: 33686},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1096, col: 30, offset: 33686},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1096, col: 44, offset: 33700},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1096, col: 44, offset: 33700},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 50, offset: 33706},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 56, offset: 33712},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 60, offset: 33716},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1096, col: 64, offset: 33720},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1096, col: 64, offset: 33720},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 73, offset: 33729},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 81, offset: 33737},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 88, offset: 33744},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 95, offset: 33751},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 103, offset: 33759},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 109, offset: 33765},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 119, offset: 33775},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1116, col: 1, offset: 34200},
			expr: &actionExpr{
				pos: position{line: 1116, col: 16, offset: 34215},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 16, offset: 34215},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1116, col: 16, offset: 34215},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1116, col: 21, offset: 34220},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 32, offset: 34231},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 43, offset: 34242},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1132, col: 1, offset: 34617},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 15, offset: 34631},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1132, col: 15, offset: 34631},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1132, col: 15, offset: 34631},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1132, col: 15, offset: 34631},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1132, col: 31, offset: 34647},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1132, col: 45, offset: 34661},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 48, offset: 34664},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1132, col: 59, offset: 34675},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 3, offset: 34994},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1143, col: 3, offset: 34994},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1143, col: 3, offset: 34994},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 19, offset: 35010},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1143, col: 33, offset: 35024},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 36, offset: 35027},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 47, offset: 35038},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1165, col: 1, offset: 35604},
			expr: &actionExpr{
				pos: position{line: 1165, col: 13, offset: 35616},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 13, offset: 35616},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1165, col: 13, offset: 35616},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 18, offset: 35621},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1165, col: 26, offset: 35629},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 34, offset: 35637},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 40, offset: 35643},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 46, offset: 35649},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 62, offset: 35665},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 68, offset: 35671},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 72, offset: 35675},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1193, col: 1, offset: 36378},
			expr: &actionExpr{
				pos: position{line: 1193, col: 14, offset: 36391},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 14, offset: 36391},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1193, col: 14, offset: 36391},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 19, offset: 36396},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 28, offset: 36405},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1193, col: 34, offset: 36411},
								expr: &ruleRefExpr{
									pos:  position{line: 1193, col: 35, offset: 36412},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 47, offset: 36424},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 58, offset: 36435},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1230, col: 1, offset: 37286},
			expr: &actionExpr{
				pos: position{line: 1230, col: 14, offset: 37299},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 14, offset: 37299},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1230, col: 14, offset: 37299},
							expr: &seqExpr{
								pos: position{line: 1230, col: 15, offset: 37300},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1230, col: 15, offset: 37300},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 23, offset: 37308},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1230, col: 31, offset: 37316},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1230, col: 40, offset: 37325},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1230, col: 56, offset: 37341},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1244, col: 1, offset: 37640},
			expr: &actionExpr{
				pos: position{line: 1244, col: 14, offset: 37653},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 14, offset: 37653},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1244, col: 14, offset: 37653},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 19, offset: 37658},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 28, offset: 37667},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 34, offset: 37673},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 45, offset: 37684},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1244, col: 50, offset: 37689},
								expr: &seqExpr{
									pos: position{line: 1244, col: 51, offset: 37690},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1244, col: 51, offset: 37690},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1244, col: 57, offset: 37696},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1271, col: 1, offset: 38497},
			expr: &actionExpr{
				pos: position{line: 1271, col: 15, offset: 38511},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 15, offset: 38511},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1271, col: 15, offset: 38511},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 21, offset: 38517},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 31, offset: 38527},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 37, offset: 38533},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 42, offset: 38538},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1284, col: 1, offset: 38939},
			expr: &actionExpr{
				pos: position{line: 1284, col: 19, offset: 38957},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1284, col: 19, offset: 38957},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1284, col: 25, offset: 38963},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1293, col: 1, offset: 39187},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 18, offset: 39204},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1293, col: 18, offset: 39204},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 1293, col: 18, offset: 39204},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1293, col: 18, offset: 39204},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1293, col: 23, offset: 39209},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 31, offset: 39217},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 41, offset: 39227},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1293, col: 50, offset: 39236},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 56, offset: 39242},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 66, offset: 39252},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1293, col: 76, offset: 39262},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 82, offset: 39268},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 93, offset: 39279},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1293, col: 103, offset: 39289},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 3, offset: 39540},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 1304, col: 3, offset: 39540},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1304, col: 3, offset: 39540},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1304, col: 11, offset: 39548},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1304, col: 11, offset: 39548},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 1304, col: 20, offset: 39557},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1304, col: 32, offset: 39569},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 40, offset: 39577},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 45, offset: 39582},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 64, offset: 39601},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1304, col: 69, offset: 39606},
										expr: &seqExpr{
											pos: position{line: 1304, col: 70, offset: 39607},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1304, col: 70, offset: 39607},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1304, col: 76, offset: 39613},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1304, col: 97, offset: 39634},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 3, offset: 40238},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 1327, col: 3, offset: 40238},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1327, col: 3, offset: 40238},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1327, col: 14, offset: 40249},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 22, offset: 40257},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1327, col: 32, offset: 40267},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 42, offset: 40277},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1327, col: 47, offset: 40282},
										expr: &seqExpr{
											pos: position{line: 1327, col: 48, offset: 40283},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1327, col: 48, offset: 40283},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1327, col: 54, offset: 40289},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1327, col: 66, offset: 40301},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 3, offset: 40720},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 1344, col: 3, offset: 40720},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1344, col: 3, offset: 40720},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1344, col: 12, offset: 40729},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 20, offset: 40737},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 30, offset: 40747},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1344, col: 40, offset: 40757},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 46, offset: 40763},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 57, offset: 40774},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1344, col: 67, offset: 40784},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 1357, col: 1, offset: 41063},
			expr: &actionExpr{
				pos: position{line: 1357, col: 23, offset: 41085},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 1357, col: 23, offset: 41085},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1357, col: 23, offset: 41085},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 33, offset: 41095},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1357, col: 42, offset: 41104},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1357, col: 48, offset: 41110},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 54, offset: 41116},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1367, col: 1, offset: 41557},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 13, offset: 41569},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1367, col: 13, offset: 41569},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1367, col: 14, offset: 41570},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1367, col: 14, offset: 41570},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1367, col: 22, offset: 41578},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1367, col: 22, offset: 41578},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 1367, col: 32, offset: 41588},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 1367, col: 42, offset: 41598},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1367, col: 56, offset: 41612},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1367, col: 68, offset: 41624},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1367, col: 80, offset: 41636},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1367, col: 90, offset: 41646},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1367, col: 98, offset: 41654},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1367, col: 109, offset: 41665},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1367, col: 120, offset: 41676},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1379, col: 3, offset: 41990},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 1379, col: 4, offset: 41991},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1379, col: 4, offset: 41991},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1379, col: 12, offset: 41999},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1379, col: 12, offset: 41999},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1379, col: 20, offset: 42007},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1379, col: 28, offset: 42015},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1379, col: 41, offset: 42028},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1379, col: 51, offset: 42038},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1379, col: 59, offset: 42046},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1379, col: 68, offset: 42055},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1379, col: 79, offset: 42066},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1379, col: 84, offset: 42071},
										expr: &seqExpr{
											pos: position{line: 1379, col: 85, offset: 42072},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1379, col: 85, offset: 42072},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1379, col: 91, offset: 42078},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1379, col: 104, offset: 42091},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 3, offset: 42691},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1401, col: 4, offset: 42692},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1401, col: 4, offset: 42692},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1401, col: 12, offset: 42700},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1401, col: 12, offset: 42700},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1401, col: 22, offset: 42710},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1401, col: 32, offset: 42720},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1401, col: 40, offset: 42728},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1401, col: 51, offset: 42739},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1401, col: 62, offset: 42750},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1401, col: 68, offset: 42756},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1401, col: 74, offset: 42762},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1401, col: 85, offset: 42773},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1413, col: 3, offset: 43106},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 1413, col: 4, offset: 43107},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1413, col: 4, offset: 43107},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1413, col: 12, offset: 43115},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 22, offset: 43125},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 30, offset: 43133},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 41, offset: 43144},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 52, offset: 43155},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 58, offset: 43161},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 69, offset: 43172},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 81, offset: 43184},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1413, col: 93, offset: 43196},
										expr: &seqExpr{
											pos: position{line: 1413, col: 94, offset: 43197},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1413, col: 94, offset: 43197},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1413, col: 100, offset: 43203},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 114, offset: 43217},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1438, col: 3, offset: 44047},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 1438, col: 3, offset: 44047},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1438, col: 3, offset: 44047},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1438, col: 14, offset: 44058},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 22, offset: 44066},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1438, col: 28, offset: 44072},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 38, offset: 44082},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1438, col: 45, offset: 44089},
										expr: &seqExpr{
											pos: position{line: 1438, col: 46, offset: 44090},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1438, col: 46, offset: 44090},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1438, col: 52, offset: 44096},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1438, col: 65, offset: 44109},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1451, col: 3, offset: 44477},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 1451, col: 4, offset: 44478},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1451, col: 4, offset: 44478},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1451, col: 12, offset: 44486},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1451, col: 12, offset: 44486},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1451, col: 22, offset: 44496},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 1451, col: 32, offset: 44506},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1451, col: 40, offset: 44514},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1451, col: 48, offset: 44522},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1451, col: 54, offset: 44528},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1451, col: 66, offset: 44540},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1451, col: 82, offset: 44556},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 83, offset: 44557},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1451, col: 101, offset: 44575},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1470, col: 3, offset: 45015},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 1470, col: 3, offset: 45015},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1470, col: 3, offset: 45015},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1470, col: 12, offset: 45024},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 20, offset: 45032},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 25, offset: 45037},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1470, col: 36, offset: 45048},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 42, offset: 45054},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 45, offset: 45057},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1470, col: 55, offset: 45067},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1477, col: 3, offset: 45225},
						run: (*parser).callonTextExpr98,
						expr: &seqExpr{
							pos: position{line: 1477, col: 3, offset: 45225},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1477, col: 3, offset: 45225},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 21, offset: 45243},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 29, offset: 45251},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 33, offset: 45255},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 43, offset: 45265},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 49, offset: 45271},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 53, offset: 45275},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 66, offset: 45288},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 72, offset: 45294},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 78, offset: 45300},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 91, offset: 45313},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1488, col: 3, offset: 45621},
						run: (*parser).callonTextExpr111,
						expr: &seqExpr{
							pos: position{line: 1488, col: 3, offset: 45621},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1488, col: 3, offset: 45621},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1488, col: 12, offset: 45630},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1488, col: 20, offset: 45638},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1488, col: 27, offset: 45645},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1488, col: 38, offset: 45656},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1488, col: 43, offset: 45661},
										expr: &seqExpr{
											pos: position{line: 1488, col: 44, offset: 45662},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1488, col: 44, offset: 45662},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1488, col: 50, offset: 45668},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1488, col: 63, offset: 45681},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1506, col: 3, offset: 46148},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 1506, col: 3, offset: 46148},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1506, col: 3, offset: 46148},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1506, col: 12, offset: 46157},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1506, col: 20, offset: 46165},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 1506, col: 42, offset: 46187},
										expr: &seqExpr{
											pos: position{line: 1506, col: 43, offset: 46188},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 1506, col: 44, offset: 46189},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1506, col: 44, offset: 46189},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1506, col: 53, offset: 46198},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1506, col: 62, offset: 46207},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1506, col: 69, offset: 46214},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1528, col: 3, offset: 46811},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 1528, col: 4, offset: 46812},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1528, col: 4, offset: 46812},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1528, col: 12, offset: 46820},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1528, col: 24, offset: 46832},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1528, col: 32, offset: 46840},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1528, col: 42, offset: 46850},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1528, col: 51, offset: 46859},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1541, col: 3, offset: 47194},
						run: (*parser).callonTextExpr143,
						expr: &seqExpr{
							pos: position{line: 1541, col: 4, offset: 47195},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1541, col: 4, offset: 47195},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1541, col: 12, offset: 47203},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 23, offset: 47214},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1541, col: 31, offset: 47222},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 42, offset: 47233},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 53, offset: 47244},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1541, col: 59, offset: 47250},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 70, offset: 47261},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1541, col: 82, offset: 47273},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 1541, col: 91, offset: 47282},
										expr: &ruleRefExpr{
											pos:  position{line: 1541, col: 92, offset: 47283},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 111, offset: 47302},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1557, col: 3, offset: 47730},
						run: (*parser).callonTextExpr157,
						expr: &seqExpr{
							pos: position{line: 1557, col: 4, offset: 47731},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1557, col: 4, offset: 47731},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1557, col: 12, offset: 47739},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1557, col: 21, offset: 47748},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 29, offset: 47756},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1557, col: 40, offset: 47767},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1557, col: 51, offset: 47778},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1557, col: 57, offset: 47784},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1557, col: 62, offset: 47789},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1557, col: 72, offset: 47799},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1570, col: 3, offset: 48125},
						run: (*parser).callonTextExpr168,
						expr: &seqExpr{
							pos: position{line: 1570, col: 4, offset: 48126},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1570, col: 4, offset: 48126},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1570, col: 12, offset: 48134},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1570, col: 23, offset: 48145},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1570, col: 31, offset: 48153},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1570, col: 42, offset: 48164},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1570, col: 54, offset: 48176},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1570, col: 60, offset: 48182},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1570, col: 69, offset: 48191},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1570, col: 81, offset: 48203},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1570, col: 87, offset: 48209},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1570, col: 98, offset: 48220},
										expr: &ruleRefExpr{
											pos:  position{line: 1570, col: 99, offset: 48221},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1570, col: 112, offset: 48234},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1586, col: 3, offset: 48664},
						run: (*parser).callonTextExpr183,
						expr: &seqExpr{
							pos: position{line: 1586, col: 4, offset: 48665},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1586, col: 4, offset: 48665},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1586, col: 12, offset: 48673},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1586, col: 21, offset: 48682},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1586, col: 29, offset: 48690},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 1586, col: 36, offset: 48697},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1586, col: 47, offset: 48708},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1586, col: 53, offset: 48714},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 1586, col: 61, offset: 48722},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1586, col: 72, offset: 48733},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1586, col: 77, offset: 48738},
										expr: &seqExpr{
											pos: position{line: 1586, col: 78, offset: 48739},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1586, col: 78, offset: 48739},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1586, col: 84, offset: 48745},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1586, col: 97, offset: 48758},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1607, col: 3, offset: 49282},
						run: (*parser).callonTextExpr199,
						expr: &seqExpr{
							pos: position{line: 1607, col: 4, offset: 49283},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1607, col: 4, offset: 49283},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1607, col: 12, offset: 49291},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1607, col: 32, offset: 49311},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1607, col: 40, offset: 49319},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1607, col: 51, offset: 49330},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1607, col: 62, offset: 49341},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1607, col: 67, offset: 49346},
										expr: &seqExpr{
											pos: position{line: 1607, col: 68, offset: 49347},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1607, col: 68, offset: 49347},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 1607, col: 75, offset: 49354},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1607, col: 75, offset: 49354},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1607, col: 84, offset: 49363},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1607, col: 93, offset: 49372},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1607, col: 100, offset: 49379},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1632, col: 3, offset: 50014},
						run: (*parser).callonTextExpr215,
						expr: &seqExpr{
							pos: position{line: 1632, col: 3, offset: 50014},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1632, col: 3, offset: 50014},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 13, offset: 50024},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 21, offset: 50032},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 27, offset: 50038},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 43, offset: 50054},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 1632, col: 53, offset: 50064},
										expr: &seqExpr{
											pos: position{line: 1632, col: 54, offset: 50065},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1632, col: 54, offset: 50065},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1632, col: 60, offset: 50071},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1632, col: 73, offset: 50084},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 89, offset: 50100},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 1632, col: 95, offset: 50106},
										expr: &seqExpr{
											pos: position{line: 1632, col: 96, offset: 50107},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1632, col: 96, offset: 50107},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1632, col: 102, offset: 50113},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 1632, col: 112, offset: 50123},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1632, col: 112, offset: 50123},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 125, offset: 50136},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 1632, col: 137, offset: 50148},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 151, offset: 50162},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 1632, col: 158, offset: 50169},
										expr: &seqExpr{
											pos: position{line: 1632, col: 159, offset: 50170},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1632, col: 159, offset: 50170},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1632, col: 165, offset: 50176},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1632, col: 175, offset: 50186},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 190, offset: 50201},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1672, col: 3, offset: 51196},
						run: (*parser).callonTextExpr243,
						expr: &seqExpr{
							pos: position{line: 1672, col: 3, offset: 51196},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1672, col: 3, offset: 51196},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1672, col: 15, offset: 51208},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1672, col: 23, offset: 51216},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 1672, col: 30, offset: 51223},
										expr: &ruleRefExpr{
											pos:  position{line: 1672, col: 31, offset: 51224},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1672, col: 44, offset: 51237},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1683, col: 3, offset: 51428},
						run: (*parser).callonTextExpr251,
						expr: &seqExpr{
							pos: position{line: 1683, col: 3, offset: 51428},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1683, col: 3, offset: 51428},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 12, offset: 51437},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1683, col: 20, offset: 51445},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1683, col: 30, offset: 51455},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 40, offset: 51465},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1689, col: 3, offset: 51588},
						run: (*parser).callonTextExpr258,
						expr: &seqExpr{
							pos: position{line: 1689, col: 3, offset: 51588},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1689, col: 3, offset: 51588},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1689, col: 13, offset: 51598},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1689, col: 21, offset: 51606},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1689, col: 25, offset: 51610},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1689, col: 35, offset: 51620},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1689, col: 41, offset: 51626},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 1689, col: 47, offset: 51632},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1689, col: 58, offset: 51643},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1689, col: 64, offset: 51649},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 1689, col: 76, offset: 51661},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1689, col: 87, offset: 51672},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1696, col: 3, offset: 51896},
						run: (*parser).callonTextExpr271,
						expr: &seqExpr{
							pos: position{line: 1696, col: 3, offset: 51896},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1696, col: 3, offset: 51896},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1696, col: 11, offset: 51904},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1696, col: 19, offset: 51912},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1696, col: 23, offset: 51916},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1696, col: 33, offset: 51926},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1696, col: 39, offset: 51932},
									label: "path",
									expr: &ruleRefExpr{
										pos:  position{line: 1696, col: 44, offset: 51937},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1696, col: 55, offset: 51948},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1704, col: 1, offset: 52106},
			expr: &actionExpr{
				pos: position{line: 1704, col: 20, offset: 52125},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1704, col: 20, offset: 52125},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1704, col: 20, offset: 52125},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1704, col: 26, offset: 52131},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1704, col: 38, offset: 52143},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1710, col: 1, offset: 52328},
			expr: &choiceExpr{
				pos: position{line: 1710, col: 20, offset: 52347},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1710, col: 20, offset: 52347},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1710, col: 20, offset: 52347},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1710, col: 20, offset: 52347},
									expr: &charClassMatcher{
										pos:        position{line: 1710, col: 20, offset: 52347},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1710, col: 31, offset: 52358},
									expr: &litMatcher{
										pos:        position{line: 1710, col: 33, offset: 52360},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1713, col: 3, offset: 52402},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1713, col: 3, offset: 52402},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1713, col: 3, offset: 52402},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1713, col: 7, offset: 52406},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1713, col: 13, offset: 52412},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1713, col: 23, offset: 52422},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1718, col: 1, offset: 52490},
			expr: &actionExpr{
				pos: position{line: 1718, col: 15, offset: 52504},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1718, col: 15, offset: 52504},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1718, col: 15, offset: 52504},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1718, col: 20, offset: 52509},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1718, col: 30, offset: 52519},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1718, col: 40, offset: 52529},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1730, col: 1, offset: 52822},
			expr: &actionExpr{
				pos: position{line: 1730, col: 13, offset: 52834},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1730, col: 13, offset: 52834},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1730, col: 18, offset: 52839},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1735, col: 1, offset: 52909},
			expr: &actionExpr{
				pos: position{line: 1735, col: 19, offset: 52927},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1735, col: 19, offset: 52927},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1735, col: 19, offset: 52927},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1735, col: 25, offset: 52933},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1735, col: 40, offset: 52948},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1735, col: 45, offset: 52953},
								expr: &seqExpr{
									pos: position{line: 1735, col: 46, offset: 52954},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1735, col: 46, offset: 52954},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 49, offset: 52957},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1755, col: 1, offset: 53395},
			expr: &actionExpr{
				pos: position{line: 1755, col: 19, offset: 53413},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1755, col: 19, offset: 53413},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1755, col: 19, offset: 53413},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 25, offset: 53419},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 40, offset: 53434},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1755, col: 45, offset: 53439},
								expr: &seqExpr{
									pos: position{line: 1755, col: 46, offset: 53440},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1755, col: 46, offset: 53440},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1755, col: 50, offset: 53444},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1775, col: 1, offset: 53883},
			expr: &choiceExpr{
				pos: position{line: 1775, col: 19, offset: 53901},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1775, col: 19, offset: 53901},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1775, col: 19, offset: 53901},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1775, col: 19, offset: 53901},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1775, col: 23, offset: 53905},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1775, col: 31, offset: 53913},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1775, col: 37, offset: 53919},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1775, col: 52, offset: 53934},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1785, col: 3, offset: 54137},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1785, col: 3, offset: 54137},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1785, col: 9, offset: 54143},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1790, col: 1, offset: 54214},
			expr: &choiceExpr{
				pos: position{line: 1790, col: 19, offset: 54232},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1790, col: 19, offset: 54232},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1790, col: 19, offset: 54232},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1790, col: 19, offset: 54232},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1790, col: 27, offset: 54240},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1790, col: 33, offset: 54246},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1790, col: 48, offset: 54261},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1793, col: 3, offset: 54297},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1793, col: 3, offset: 54297},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 1793, col: 10, offset: 54304},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1793, col: 10, offset: 54304},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 1793, col: 31, offset: 54325},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 1798, col: 1, offset: 54445},
			expr: &choiceExpr{
				pos: position{line: 1798, col: 23, offset: 54467},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1798, col: 23, offset: 54467},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 1798, col: 24, offset: 54468},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1798, col: 24, offset: 54468},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1798, col: 28, offset: 54472},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1798, col: 28, offset: 54472},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 39, offset: 54483},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 49, offset: 54493},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 59, offset: 54503},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 70, offset: 54514},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 84, offset: 54528},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 1798, col: 94, offset: 54538},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1798, col: 109, offset: 54553},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1798, col: 117, offset: 54561},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1798, col: 123, offset: 54567},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1798, col: 133, offset: 54577},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1811, col: 3, offset: 54913},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 1811, col: 3, offset: 54913},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1811, col: 3, offset: 54913},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1811, col: 11, offset: 54921},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1811, col: 11, offset: 54921},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 1811, col: 20, offset: 54930},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 1811, col: 29, offset: 54939},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 1811, col: 39, offset: 54949},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1811, col: 52, offset: 54962},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1811, col: 60, offset: 54970},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1811, col: 70, offset: 54980},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1811, col: 80, offset: 54990},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1811, col: 86, offset: 54996},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1811, col: 97, offset: 55007},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1811, col: 107, offset: 55017},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1824, col: 3, offset: 55387},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 1824, col: 3, offset: 55387},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1824, col: 3, offset: 55387},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1824, col: 8, offset: 55392},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1824, col: 18, offset: 55402},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 24, offset: 55408},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1824, col: 29, offset: 55413},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1824, col: 37, offset: 55421},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1824, col: 50, offset: 55434},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1824, col: 60, offset: 55444},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1824, col: 65, offset: 55449},
										expr: &seqExpr{
											pos: position{line: 1824, col: 66, offset: 55450},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1824, col: 66, offset: 55450},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1824, col: 72, offset: 55456},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1824, col: 84, offset: 55468},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1843, col: 3, offset: 56019},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 1843, col: 3, offset: 56019},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1843, col: 3, offset: 56019},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1843, col: 8, offset: 56024},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1843, col: 16, offset: 56032},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1843, col: 29, offset: 56045},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1843, col: 39, offset: 56055},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1843, col: 44, offset: 56060},
										expr: &seqExpr{
											pos: position{line: 1843, col: 45, offset: 56061},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1843, col: 45, offset: 56061},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1843, col: 51, offset: 56067},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1843, col: 63, offset: 56079},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1861, col: 1, offset: 56500},
			expr: &actionExpr{
				pos: position{line: 1861, col: 23, offset: 56522},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1861, col: 23, offset: 56522},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1861, col: 23, offset: 56522},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 28, offset: 56527},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1861, col: 38, offset: 56537},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 41, offset: 56540},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1861, col: 62, offset: 56561},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 68, offset: 56567},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1879, col: 1, offset: 57161},
			expr: &choiceExpr{
				pos: position{line: 1879, col: 14, offset: 57174},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1879, col: 14, offset: 57174},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1879, col: 14, offset: 57174},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1879, col: 24, offset: 57184},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1888, col: 3, offset: 57374},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1888, col: 3, offset: 57374},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1888, col: 3, offset: 57374},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1888, col: 12, offset: 57383},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1888, col: 22, offset: 57393},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1888, col: 37, offset: 57408},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1897, col: 3, offset: 57592},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1897, col: 3, offset: 57592},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1897, col: 11, offset: 57600},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1906, col: 3, offset: 57780},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1906, col: 3, offset: 57780},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1906, col: 7, offset: 57784},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1915, col: 3, offset: 57956},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1915, col: 3, offset: 57956},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1915, col: 3, offset: 57956},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1915, col: 12, offset: 57965},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1915, col: 16, offset: 57969},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 28, offset: 57981},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1924, col: 3, offset: 58150},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1924, col: 3, offset: 58150},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1924, col: 3, offset: 58150},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1924, col: 11, offset: 58158},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1924, col: 19, offset: 58166},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 28, offset: 58175},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1934, col: 1, offset: 58346},
			expr: &choiceExpr{
				pos: position{line: 1934, col: 15, offset: 58360},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1934, col: 15, offset: 58360},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1934, col: 15, offset: 58360},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1934, col: 15, offset: 58360},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 20, offset: 58365},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1934, col: 29, offset: 58374},
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 31, offset: 58376},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1942, col: 3, offset: 58546},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 1942, col: 3, offset: 58546},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1942, col: 3, offset: 58546},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1942, col: 7, offset: 58550},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1942, col: 20, offset: 58563},
									expr: &ruleRefExpr{
										pos:  position{line: 1942, col: 22, offset: 58565},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1950, col: 3, offset: 58730},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 1950, col: 3, offset: 58730},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1950, col: 3, offset: 58730},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1950, col: 9, offset: 58736},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1950, col: 25, offset: 58752},
									expr: &choiceExpr{
										pos: position{line: 1950, col: 27, offset: 58754},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1950, col: 27, offset: 58754},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1950, col: 36, offset: 58763},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1950, col: 46, offset: 58773},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1950, col: 54, offset: 58781},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1950, col: 62, offset: 58789},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1950, col: 76, offset: 58803},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1958, col: 3, offset: 58953},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 1958, col: 3, offset: 58953},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 1958, col: 10, offset: 58960},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 1968, col: 1, offset: 59166},
			expr: &actionExpr{
				pos: position{line: 1968, col: 15, offset: 59180},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 15, offset: 59180},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1968, col: 15, offset: 59180},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1968, col: 21, offset: 59186},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 1968, col: 32, offset: 59197},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1968, col: 37, offset: 59202},
								expr: &seqExpr{
									pos: position{line: 1968, col: 38, offset: 59203},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1968, col: 38, offset: 59203},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 1968, col: 50, offset: 59215},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1968, col: 63, offset: 59228},
							expr: &choiceExpr{
								pos: position{line: 1968, col: 65, offset: 59230},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1968, col: 65, offset: 59230},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 1968, col: 74, offset: 59239},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 1968, col: 84, offset: 59249},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 1968, col: 92, offset: 59257},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 1968, col: 100, offset: 59265},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 1986, col: 1, offset: 59671},
			expr: &choiceExpr{
				pos: position{line: 1986, col: 15, offset: 59685},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1986, col: 15, offset: 59685},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 1986, col: 15, offset: 59685},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 20, offset: 59690},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1995, col: 3, offset: 59854},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 1995, col: 3, offset: 59854},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1995, col: 7, offset: 59858},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2003, col: 3, offset: 59997},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2003, col: 3, offset: 59997},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2003, col: 10, offset: 60004},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2011, col: 3, offset: 60143},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2011, col: 3, offset: 60143},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2011, col: 9, offset: 60149},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2021, col: 1, offset: 60318},
			expr: &actionExpr{
				pos: position{line: 2021, col: 16, offset: 60333},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 16, offset: 60333},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2021, col: 16, offset: 60333},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2021, col: 21, offset: 60338},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2021, col: 39, offset: 60356},
							expr: &choiceExpr{
								pos: position{line: 2021, col: 41, offset: 60358},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2021, col: 41, offset: 60358},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2021, col: 55, offset: 60372},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2026, col: 1, offset: 60437},
			expr: &actionExpr{
				pos: position{line: 2026, col: 22, offset: 60458},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2026, col: 22, offset: 60458},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2026, col: 22, offset: 60458},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 28, offset: 60464},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 46, offset: 60482},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2026, col: 51, offset: 60487},
								expr: &seqExpr{
									pos: position{line: 2026, col: 52, offset: 60488},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2026, col: 53, offset: 60489},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2026, col: 53, offset: 60489},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2026, col: 62, offset: 60498},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2026, col: 71, offset: 60507},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2047, col: 1, offset: 61008},
			expr: &actionExpr{
				pos: position{line: 2047, col: 22, offset: 61029},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2047, col: 22, offset: 61029},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2047, col: 22, offset: 61029},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2047, col: 28, offset: 61035},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2047, col: 46, offset: 61053},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2047, col: 51, offset: 61058},
								expr: &seqExpr{
									pos: position{line: 2047, col: 52, offset: 61059},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2047, col: 53, offset: 61060},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2047, col: 53, offset: 61060},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2047, col: 61, offset: 61068},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2047, col: 68, offset: 61075},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2067, col: 1, offset: 61544},
			expr: &actionExpr{
				pos: position{line: 2067, col: 21, offset: 61564},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2067, col: 21, offset: 61564},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2067, col: 21, offset: 61564},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2067, col: 27, offset: 61570},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2067, col: 32, offset: 61575},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2077, col: 1, offset: 61819},
			expr: &choiceExpr{
				pos: position{line: 2077, col: 22, offset: 61840},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2077, col: 22, offset: 61840},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2077, col: 22, offset: 61840},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2077, col: 22, offset: 61840},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2077, col: 30, offset: 61848},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2077, col: 35, offset: 61853},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2077, col: 53, offset: 61871},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2080, col: 3, offset: 61906},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2080, col: 3, offset: 61906},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2080, col: 20, offset: 61923},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2083, col: 3, offset: 61977},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2083, col: 3, offset: 61977},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2083, col: 9, offset: 61983},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2093, col: 3, offset: 62202},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2093, col: 3, offset: 62202},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2093, col: 10, offset: 62209},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2106, col: 1, offset: 62556},
			expr: &choiceExpr{
				pos: position{line: 2106, col: 20, offset: 62575},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2106, col: 20, offset: 62575},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2106, col: 21, offset: 62576},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2106, col: 21, offset: 62576},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2106, col: 29, offset: 62584},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2106, col: 29, offset: 62584},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 37, offset: 62592},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 46, offset: 62601},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 58, offset: 62613},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 66, offset: 62621},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 75, offset: 62630},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 83, offset: 62638},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 93, offset: 62648},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2106, col: 100, offset: 62655},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 110, offset: 62665},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2106, col: 118, offset: 62673},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2106, col: 124, offset: 62679},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 143, offset: 62698},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2126, col: 3, offset: 63210},
						run: (*parser).callonNumericEvalExpr19,
						expr: &seqExpr{
							pos: position{line: 2126, col: 3, offset: 63210},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2126, col: 3, offset: 63210},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2126, col: 13, offset: 63220},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2126, col: 21, offset: 63228},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2126, col: 29, offset: 63236},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2126, col: 35, offset: 63242},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2126, col: 54, offset: 63261},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2126, col: 69, offset: 63276},
										expr: &ruleRefExpr{
											pos:  position{line: 2126, col: 70, offset: 63277},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2126, col: 89, offset: 63296},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2147, col: 3, offset: 63914},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 2147, col: 4, offset: 63915},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2147, col: 4, offset: 63915},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2147, col: 12, offset: 63923},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2147, col: 12, offset: 63923},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2147, col: 20, offset: 63931},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2147, col: 27, offset: 63938},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2147, col: 37, offset: 63948},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2147, col: 45, offset: 63956},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2160, col: 3, offset: 64242},
						run: (*parser).callonNumericEvalExpr39,
						expr: &seqExpr{
							pos: position{line: 2160, col: 3, offset: 64242},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2160, col: 3, offset: 64242},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2160, col: 14, offset: 64253},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2160, col: 22, offset: 64261},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2160, col: 33, offset: 64272},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2160, col: 44, offset: 64283},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2160, col: 53, offset: 64292},
										expr: &seqExpr{
											pos: position{line: 2160, col: 54, offset: 64293},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2160, col: 54, offset: 64293},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2160, col: 60, offset: 64299},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2160, col: 80, offset: 64319},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2188, col: 3, offset: 65161},
						run: (*parser).callonNumericEvalExpr51,
						expr: &seqExpr{
							pos: position{line: 2188, col: 3, offset: 65161},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2188, col: 3, offset: 65161},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2188, col: 12, offset: 65170},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2188, col: 18, offset: 65176},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2188, col: 26, offset: 65184},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2188, col: 31, offset: 65189},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2188, col: 39, offset: 65197},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2191, col: 3, offset: 65232},
						run: (*parser).callonNumericEvalExpr59,
						expr: &seqExpr{
							pos: position{line: 2191, col: 4, offset: 65233},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2191, col: 4, offset: 65233},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2191, col: 12, offset: 65241},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2191, col: 12, offset: 65241},
												val:        "log",
												ignoreCase: false,
												want:       "\"log\"",
											},
											&litMatcher{
												pos:        position{line: 2191, col: 20, offset: 65249},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2191, col: 27, offset: 65256},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2191, col: 35, offset: 65264},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2191, col: 41, offset: 65270},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2191, col: 60, offset: 65289},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2191, col: 67, offset: 65296},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2191, col: 85, offset: 65314},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2222, col: 1, offset: 66152},
			expr: &choiceExpr{
				pos: position{line: 2222, col: 12, offset: 66163},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2222, col: 12, offset: 66163},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2222, col: 12, offset: 66163},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2222, col: 12, offset: 66163},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2222, col: 16, offset: 66167},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2222, col: 29, offset: 66180},
									expr: &ruleRefExpr{
										pos:  position{line: 2222, col: 31, offset: 66182},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2238, col: 3, offset: 66543},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2238, col: 3, offset: 66543},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2238, col: 3, offset: 66543},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2238, col: 9, offset: 66549},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2238, col: 25, offset: 66565},
									expr: &choiceExpr{
										pos: position{line: 2238, col: 27, offset: 66567},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2238, col: 27, offset: 66567},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2238, col: 36, offset: 66576},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2238, col: 46, offset: 66586},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2238, col: 54, offset: 66594},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2238, col: 62, offset: 66602},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2238, col: 76, offset: 66616},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 2256, col: 1, offset: 67004},
			expr: &choiceExpr{
				pos: position{line: 2256, col: 14, offset: 67017},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2256, col: 14, offset: 67017},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 2256, col: 14, offset: 67017},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2256, col: 14, offset: 67017},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2256, col: 19, offset: 67022},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 2256, col: 28, offset: 67031},
									expr: &seqExpr{
										pos: position{line: 2256, col: 29, offset: 67032},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2256, col: 29, offset: 67032},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2256, col: 37, offset: 67040},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2256, col: 45, offset: 67048},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 2256, col: 54, offset: 67057},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2271, col: 3, offset: 67473},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 2271, col: 3, offset: 67473},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2271, col: 3, offset: 67473},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2271, col: 8, offset: 67478},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 2284, col: 1, offset: 67928},
			expr: &actionExpr{
				pos: position{line: 2284, col: 20, offset: 67947},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 2284, col: 20, offset: 67947},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2284, col: 20, offset: 67947},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2284, col: 26, offset: 67953},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2284, col: 37, offset: 67964},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2284, col: 42, offset: 67969},
								expr: &seqExpr{
									pos: position{line: 2284, col: 43, offset: 67970},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2284, col: 44, offset: 67971},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2284, col: 44, offset: 67971},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2284, col: 52, offset: 67979},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2284, col: 59, offset: 67986},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 2301, col: 1, offset: 68489},
			expr: &actionExpr{
				pos: position{line: 2301, col: 15, offset: 68503},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 2301, col: 15, offset: 68503},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2301, col: 15, offset: 68503},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 2301, col: 23, offset: 68511},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 2301, col: 35, offset: 68523},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 2301, col: 43, offset: 68531},
								expr: &ruleRefExpr{
									pos:  position{line: 2301, col: 43, offset: 68531},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 2317, col: 1, offset: 69372},
			expr: &actionExpr{
				pos: position{line: 2317, col: 16, offset: 69387},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 2317, col: 16, offset: 69387},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 2317, col: 21, offset: 69392},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2317, col: 21, offset: 69392},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 32, offset: 69403},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 51, offset: 69422},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 60, offset: 69431},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 69, offset: 69440},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 78, offset: 69449},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 89, offset: 69460},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 98, offset: 69469},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 110, offset: 69481},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 121, offset: 69492},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 137, offset: 69508},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 152, offset: 69523},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 164, offset: 69535},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 2317, col: 174, offset: 69545},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 1, offset: 69555},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 12, offset: 69566},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 24, offset: 69578},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 35, offset: 69589},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 50, offset: 69604},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 59, offset: 69613},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 69, offset: 69623},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 80, offset: 69634},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 90, offset: 69644},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 100, offset: 69654},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 114, offset: 69668},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 132, offset: 69686},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 144, offset: 69698},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2318, col: 160, offset: 69714},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 2322, col: 1, offset: 69748},
			expr: &actionExpr{
				pos: position{line: 2322, col: 12, offset: 69759},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 2322, col: 12, offset: 69759},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2322, col: 12, offset: 69759},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 2322, col: 15, offset: 69762},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 2322, col: 23, offset: 69770},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2322, col: 23, offset: 69770},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 2322, col: 35, offset: 69782},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 2336, col: 1, offset: 70111},
			expr: &choiceExpr{
				pos: position{line: 2336, col: 13, offset: 70123},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2336, col: 13, offset: 70123},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 2336, col: 13, offset: 70123},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2336, col: 14, offset: 70124},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2336, col: 14, offset: 70124},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2336, col: 24, offset: 70134},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2336, col: 29, offset: 70139},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2336, col: 37, offset: 70147},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2336, col: 44, offset: 70154},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2336, col: 53, offset: 70163},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2336, col: 62, offset: 70172},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2351, col: 3, offset: 70522},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 2351, col: 3, offset: 70522},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2351, col: 4, offset: 70523},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2351, col: 4, offset: 70523},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2351, col: 14, offset: 70533},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2351, col: 19, offset: 70538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2351, col: 27, offset: 70546},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2351, col: 33, offset: 70552},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2351, col: 43, offset: 70562},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2358, col: 5, offset: 70713},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 2358, col: 6, offset: 70714},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2358, col: 6, offset: 70714},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 2358, col: 16, offset: 70724},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 2367, col: 1, offset: 70860},
			expr: &choiceExpr{
				pos: position{line: 2367, col: 21, offset: 70880},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2367, col: 21, offset: 70880},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 2367, col: 21, offset: 70880},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2367, col: 22, offset: 70881},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2367, col: 22, offset: 70881},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2367, col: 41, offset: 70900},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2367, col: 47, offset: 70906},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2367, col: 55, offset: 70914},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2367, col: 62, offset: 70921},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2367, col: 72, offset: 70931},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2367, col: 82, offset: 70941},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2377, col: 3, offset: 71175},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 2377, col: 3, offset: 71175},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2377, col: 4, offset: 71176},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2377, col: 4, offset: 71176},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2377, col: 23, offset: 71195},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 29, offset: 71201},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2377, col: 37, offset: 71209},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2377, col: 43, offset: 71215},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 53, offset: 71225},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 2386, col: 1, offset: 71381},
			expr: &choiceExpr{
				pos: position{line: 2386, col: 11, offset: 71391},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2386, col: 11, offset: 71391},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 2386, col: 11, offset: 71391},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2386, col: 11, offset: 71391},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2386, col: 17, offset: 71397},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2386, col: 25, offset: 71405},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2386, col: 32, offset: 71412},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2386, col: 40, offset: 71420},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2386, col: 59, offset: 71439},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2386, col: 78, offset: 71458},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2386, col: 86, offset: 71466},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2401, col: 3, offset: 71824},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 2401, col: 3, offset: 71824},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2401, col: 3, offset: 71824},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2401, col: 9, offset: 71830},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2401, col: 17, offset: 71838},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2401, col: 23, offset: 71844},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2401, col: 33, offset: 71854},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 2410, col: 1, offset: 72002},
			expr: &choiceExpr{
				pos: position{line: 2410, col: 11, offset: 72012},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2410, col: 11, offset: 72012},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 2410, col: 11, offset: 72012},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2410, col: 11, offset: 72012},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2410, col: 17, offset: 72018},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2410, col: 25, offset: 72026},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2410, col: 32, offset: 72033},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2410, col: 40, offset: 72041},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2410, col: 59, offset: 72060},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2410, col: 78, offset: 72079},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2410, col: 86, offset: 72087},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2425, col: 3, offset: 72445},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 2425, col: 3, offset: 72445},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2425, col: 3, offset: 72445},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2425, col: 9, offset: 72451},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 17, offset: 72459},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2425, col: 23, offset: 72465},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2425, col: 33, offset: 72475},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 2434, col: 1, offset: 72623},
			expr: &choiceExpr{
				pos: position{line: 2434, col: 11, offset: 72633},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2434, col: 11, offset: 72633},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 2434, col: 11, offset: 72633},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2434, col: 11, offset: 72633},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2434, col: 17, offset: 72639},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2434, col: 25, offset: 72647},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2434, col: 32, offset: 72654},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2434, col: 41, offset: 72663},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2434, col: 60, offset: 72682},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2434, col: 79, offset: 72701},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2434, col: 87, offset: 72709},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2449, col: 3, offset: 73067},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 2449, col: 3, offset: 73067},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2449, col: 3, offset: 73067},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2449, col: 9, offset: 73073},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2449, col: 17, offset: 73081},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2449, col: 23, offset: 73087},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2449, col: 33, offset: 73097},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 2458, col: 1, offset: 73245},
			expr: &choiceExpr{
				pos: position{line: 2458, col: 13, offset: 73257},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2458, col: 13, offset: 73257},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 2458, col: 13, offset: 73257},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2458, col: 13, offset: 73257},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2458, col: 21, offset: 73265},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2458, col: 29, offset: 73273},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2458, col: 36, offset: 73280},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2458, col: 44, offset: 73288},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2458, col: 63, offset: 73307},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2458, col: 82, offset: 73326},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2458, col: 90, offset: 73334},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2473, col: 3, offset: 73694},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 2473, col: 3, offset: 73694},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2473, col: 3, offset: 73694},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2473, col: 11, offset: 73702},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2473, col: 19, offset: 73710},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2473, col: 25, offset: 73716},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2473, col: 35, offset: 73726},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 2482, col: 1, offset: 73876},
			expr: &choiceExpr{
				pos: position{line: 2482, col: 11, offset: 73886},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2482, col: 11, offset: 73886},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 2482, col: 11, offset: 73886},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2482, col: 11, offset: 73886},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 17, offset: 73892},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2482, col: 25, offset: 73900},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 32, offset: 73907},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2482, col: 40, offset: 73915},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2482, col: 59, offset: 73934},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 78, offset: 73953},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 86, offset: 73961},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2497, col: 3, offset: 74319},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 2497, col: 3, offset: 74319},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2497, col: 3, offset: 74319},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 9, offset: 74325},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2497, col: 17, offset: 74333},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2497, col: 23, offset: 74339},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 33, offset: 74349},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 2507, col: 1, offset: 74537},
			expr: &choiceExpr{
				pos: position{line: 2507, col: 13, offset: 74549},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2507, col: 13, offset: 74549},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 2507, col: 13, offset: 74549},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2507, col: 13, offset: 74549},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 21, offset: 74557},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2507, col: 29, offset: 74565},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 36, offset: 74572},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2507, col: 44, offset: 74580},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2507, col: 63, offset: 74599},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 82, offset: 74618},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 90, offset: 74626},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2522, col: 3, offset: 74986},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 2522, col: 3, offset: 74986},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2522, col: 3, offset: 74986},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 11, offset: 74994},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2522, col: 19, offset: 75002},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2522, col: 25, offset: 75008},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 35, offset: 75018},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 2532, col: 1, offset: 75208},
			expr: &choiceExpr{
				pos: position{line: 2532, col: 18, offset: 75225},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2532, col: 18, offset: 75225},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 2532, col: 18, offset: 75225},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2532, col: 18, offset: 75225},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2532, col: 32, offset: 75239},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2532, col: 40, offset: 75247},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2532, col: 47, offset: 75254},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2532, col: 55, offset: 75262},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2532, col: 74, offset: 75281},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2532, col: 93, offset: 75300},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2532, col: 101, offset: 75308},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2547, col: 3, offset: 75673},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 2547, col: 3, offset: 75673},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2547, col: 3, offset: 75673},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2547, col: 17, offset: 75687},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2547, col: 25, offset: 75695},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2547, col: 31, offset: 75701},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2547, col: 41, offset: 75711},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 2557, col: 1, offset: 75906},
			expr: &choiceExpr{
				pos: position{line: 2557, col: 17, offset: 75922},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2557, col: 17, offset: 75922},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 2557, col: 17, offset: 75922},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2557, col: 17, offset: 75922},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2557, col: 29, offset: 75934},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2557, col: 37, offset: 75942},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2557, col: 37, offset: 75942},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2557, col: 53, offset: 75958},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2557, col: 70, offset: 75975},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2557, col: 78, offset: 75983},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2557, col: 85, offset: 75990},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2557, col: 93, offset: 75998},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2557, col: 112, offset: 76017},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2557, col: 131, offset: 76036},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2557, col: 139, offset: 76044},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2573, col: 3, offset: 76440},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 2573, col: 3, offset: 76440},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2573, col: 3, offset: 76440},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2573, col: 15, offset: 76452},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2573, col: 23, offset: 76460},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2573, col: 23, offset: 76460},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2573, col: 39, offset: 76476},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2573, col: 56, offset: 76493},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2573, col: 64, offset: 76501},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2573, col: 70, offset: 76507},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2573, col: 80, offset: 76517},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 2584, col: 1, offset: 76743},
			expr: &choiceExpr{
				pos: position{line: 2584, col: 12, offset: 76754},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2584, col: 12, offset: 76754},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 2584, col: 12, offset: 76754},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2584, col: 12, offset: 76754},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2584, col: 19, offset: 76761},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2584, col: 27, offset: 76769},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2584, col: 27, offset: 76769},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2584, col: 43, offset: 76785},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2584, col: 60, offset: 76802},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2584, col: 68, offset: 76810},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2584, col: 75, offset: 76817},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2584, col: 83, offset: 76825},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2584, col: 102, offset: 76844},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2584, col: 121, offset: 76863},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2584, col: 129, offset: 76871},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2600, col: 3, offset: 77262},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 2600, col: 3, offset: 77262},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2600, col: 3, offset: 77262},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2600, col: 10, offset: 77269},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2600, col: 18, offset: 77277},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2600, col: 18, offset: 77277},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2600, col: 34, offset: 77293},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2600, col: 51, offset: 77310},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2600, col: 59, offset: 77318},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2600, col: 65, offset: 77324},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2600, col: 75, offset: 77334},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 2611, col: 1, offset: 77555},
			expr: &choiceExpr{
				pos: position{line: 2611, col: 17, offset: 77571},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2611, col: 17, offset: 77571},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 2611, col: 17, offset: 77571},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2611, col: 17, offset: 77571},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2611, col: 29, offset: 77583},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2611, col: 37, offset: 77591},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2611, col: 37, offset: 77591},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2611, col: 53, offset: 77607},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2611, col: 70, offset: 77624},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2611, col: 78, offset: 77632},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2611, col: 85, offset: 77639},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2611, col: 93, offset: 77647},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2611, col: 112, offset: 77666},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2611, col: 131, offset: 77685},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2611, col: 139, offset: 77693},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 3, offset: 78089},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 2627, col: 3, offset: 78089},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2627, col: 3, offset: 78089},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2627, col: 15, offset: 78101},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2627, col: 23, offset: 78109},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2627, col: 23, offset: 78109},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2627, col: 39, offset: 78125},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2627, col: 56, offset: 78142},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2627, col: 64, offset: 78150},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2627, col: 70, offset: 78156},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2627, col: 80, offset: 78166},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 2638, col: 1, offset: 78392},
			expr: &choiceExpr{
				pos: position{line: 2638, col: 14, offset: 78405},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2638, col: 14, offset: 78405},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 2638, col: 14, offset: 78405},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2638, col: 14, offset: 78405},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2638, col: 23, offset: 78414},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2638, col: 31, offset: 78422},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2638, col: 38, offset: 78429},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2638, col: 46, offset: 78437},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2638, col: 65, offset: 78456},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2638, col: 84, offset: 78475},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2638, col: 92, offset: 78483},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2653, col: 3, offset: 78844},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 2653, col: 3, offset: 78844},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2653, col: 3, offset: 78844},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 12, offset: 78853},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 20, offset: 78861},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2653, col: 26, offset: 78867},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 36, offset: 78877},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 2663, col: 1, offset: 79068},
			expr: &choiceExpr{
				pos: position{line: 2663, col: 12, offset: 79079},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2663, col: 12, offset: 79079},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 2663, col: 12, offset: 79079},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2663, col: 12, offset: 79079},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2663, col: 19, offset: 79086},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2663, col: 27, offset: 79094},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2663, col: 34, offset: 79101},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2663, col: 42, offset: 79109},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2663, col: 61, offset: 79128},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2663, col: 80, offset: 79147},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2663, col: 88, offset: 79155},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2678, col: 3, offset: 79514},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 2678, col: 3, offset: 79514},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2678, col: 3, offset: 79514},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 10, offset: 79521},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2678, col: 18, offset: 79529},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2678, col: 24, offset: 79535},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 34, offset: 79545},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 2688, col: 1, offset: 79734},
			expr: &choiceExpr{
				pos: position{line: 2688, col: 13, offset: 79746},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2688, col: 13, offset: 79746},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 2688, col: 13, offset: 79746},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2688, col: 13, offset: 79746},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2688, col: 21, offset: 79754},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2688, col: 29, offset: 79762},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2688, col: 36, offset: 79769},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2688, col: 44, offset: 79777},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2688, col: 63, offset: 79796},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2688, col: 82, offset: 79815},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2688, col: 90, offset: 79823},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2703, col: 3, offset: 80183},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 2703, col: 3, offset: 80183},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2703, col: 3, offset: 80183},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 11, offset: 80191},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2703, col: 19, offset: 80199},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2703, col: 25, offset: 80205},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 35, offset: 80215},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 2713, col: 1, offset: 80405},
			expr: &choiceExpr{
				pos: position{line: 2713, col: 14, offset: 80418},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2713, col: 14, offset: 80418},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 2713, col: 14, offset: 80418},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2713, col: 14, offset: 80418},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2713, col: 23, offset: 80427},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2713, col: 31, offset: 80435},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2713, col: 38, offset: 80442},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2713, col: 46, offset: 80450},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2713, col: 65, offset: 80469},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2713, col: 84, offset: 80488},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2713, col: 92, offset: 80496},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2728, col: 3, offset: 80857},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 2728, col: 3, offset: 80857},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2728, col: 3, offset: 80857},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2728, col: 12, offset: 80866},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2728, col: 20, offset: 80874},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2728, col: 26, offset: 80880},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2728, col: 36, offset: 80890},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 2738, col: 1, offset: 81081},
			expr: &choiceExpr{
				pos: position{line: 2738, col: 13, offset: 81093},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2738, col: 13, offset: 81093},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 2738, col: 13, offset: 81093},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2738, col: 13, offset: 81093},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2738, col: 21, offset: 81101},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2738, col: 29, offset: 81109},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2738, col: 36, offset: 81116},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2738, col: 44, offset: 81124},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2738, col: 63, offset: 81143},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2738, col: 82, offset: 81162},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2738, col: 90, offset: 81170},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2753, col: 3, offset: 81530},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 2753, col: 3, offset: 81530},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2753, col: 3, offset: 81530},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2753, col: 11, offset: 81538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2753, col: 19, offset: 81546},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2753, col: 25, offset: 81552},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2753, col: 35, offset: 81562},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 2763, col: 1, offset: 81752},
			expr: &choiceExpr{
				pos: position{line: 2763, col: 11, offset: 81762},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2763, col: 11, offset: 81762},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 2763, col: 11, offset: 81762},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2763, col: 11, offset: 81762},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2763, col: 17, offset: 81768},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2763, col: 25, offset: 81776},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2763, col: 32, offset: 81783},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2763, col: 40, offset: 81791},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2763, col: 59, offset: 81810},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2763, col: 78, offset: 81829},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2763, col: 86, offset: 81837},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2778, col: 3, offset: 82195},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 2778, col: 3, offset: 82195},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2778, col: 3, offset: 82195},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2778, col: 9, offset: 82201},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2778, col: 17, offset: 82209},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2778, col: 23, offset: 82215},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2778, col: 33, offset: 82225},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 2788, col: 1, offset: 82413},
			expr: &choiceExpr{
				pos: position{line: 2788, col: 12, offset: 82424},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2788, col: 12, offset: 82424},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 2788, col: 12, offset: 82424},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2788, col: 12, offset: 82424},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2788, col: 19, offset: 82431},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2788, col: 27, offset: 82439},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2788, col: 34, offset: 82446},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2788, col: 42, offset: 82454},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2788, col: 61, offset: 82473},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2788, col: 80, offset: 82492},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2788, col: 88, offset: 82500},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2803, col: 3, offset: 82859},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 2803, col: 3, offset: 82859},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2803, col: 3, offset: 82859},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2803, col: 10, offset: 82866},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2803, col: 18, offset: 82874},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2803, col: 24, offset: 82880},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2803, col: 34, offset: 82890},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 2813, col: 1, offset: 83079},
			expr: &choiceExpr{
				pos: position{line: 2813, col: 13, offset: 83091},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2813, col: 13, offset: 83091},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 2813, col: 13, offset: 83091},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2813, col: 13, offset: 83091},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2813, col: 21, offset: 83099},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2813, col: 29, offset: 83107},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2813, col: 36, offset: 83114},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2813, col: 44, offset: 83122},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2813, col: 63, offset: 83141},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2813, col: 82, offset: 83160},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2813, col: 90, offset: 83168},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2828, col: 3, offset: 83528},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 2828, col: 3, offset: 83528},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2828, col: 3, offset: 83528},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2828, col: 11, offset: 83536},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2828, col: 19, offset: 83544},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2828, col: 25, offset: 83550},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2828, col: 35, offset: 83560},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 2838, col: 1, offset: 83750},
			expr: &choiceExpr{
				pos: position{line: 2838, col: 12, offset: 83761},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2838, col: 12, offset: 83761},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 2838, col: 12, offset: 83761},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2838, col: 12, offset: 83761},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 19, offset: 83768},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2838, col: 27, offset: 83776},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 34, offset: 83783},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2838, col: 42, offset: 83791},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2838, col: 61, offset: 83810},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 80, offset: 83829},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 88, offset: 83837},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2853, col: 3, offset: 84196},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 2853, col: 3, offset: 84196},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2853, col: 3, offset: 84196},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2853, col: 10, offset: 84203},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2853, col: 18, offset: 84211},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2853, col: 24, offset: 84217},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2853, col: 34, offset: 84227},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 2863, col: 1, offset: 84416},
			expr: &choiceExpr{
				pos: position{line: 2863, col: 12, offset: 84427},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2863, col: 12, offset: 84427},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 2863, col: 12, offset: 84427},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2863, col: 12, offset: 84427},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 19, offset: 84434},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2863, col: 27, offset: 84442},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2863, col: 34, offset: 84449},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2863, col: 44, offset: 84459},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 54, offset: 84469},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2873, col: 3, offset: 84696},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 2873, col: 3, offset: 84696},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2873, col: 3, offset: 84696},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2873, col: 10, offset: 84703},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2873, col: 18, offset: 84711},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2873, col: 24, offset: 84717},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2873, col: 34, offset: 84727},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 2883, col: 1, offset: 84916},
			expr: &choiceExpr{
				pos: position{line: 2883, col: 16, offset: 84931},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2883, col: 16, offset: 84931},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 2883, col: 16, offset: 84931},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2883, col: 16, offset: 84931},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 27, offset: 84942},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2883, col: 35, offset: 84950},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 42, offset: 84957},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2883, col: 50, offset: 84965},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2883, col: 69, offset: 84984},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 88, offset: 85003},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 96, offset: 85011},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2898, col: 3, offset: 85374},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 2898, col: 3, offset: 85374},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2898, col: 3, offset: 85374},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2898, col: 14, offset: 85385},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2898, col: 22, offset: 85393},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2898, col: 28, offset: 85399},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2898, col: 38, offset: 85409},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 2908, col: 1, offset: 85602},
			expr: &choiceExpr{
				pos: position{line: 2908, col: 20, offset: 85621},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2908, col: 20, offset: 85621},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 2908, col: 20, offset: 85621},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2908, col: 20, offset: 85621},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 36, offset: 85637},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2908, col: 44, offset: 85645},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 51, offset: 85652},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2908, col: 59, offset: 85660},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2908, col: 78, offset: 85679},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 97, offset: 85698},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 105, offset: 85706},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2923, col: 3, offset: 86073},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 2923, col: 3, offset: 86073},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2923, col: 3, offset: 86073},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2923, col: 19, offset: 86089},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2923, col: 27, offset: 86097},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2923, col: 33, offset: 86103},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2923, col: 43, offset: 86113},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 2933, col: 1, offset: 86310},
			expr: &choiceExpr{
				pos: position{line: 2933, col: 14, offset: 86323},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2933, col: 14, offset: 86323},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 2933, col: 14, offset: 86323},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2933, col: 14, offset: 86323},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 23, offset: 86332},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2933, col: 31, offset: 86340},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 38, offset: 86347},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2933, col: 46, offset: 86355},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2933, col: 65, offset: 86374},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 84, offset: 86393},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 92, offset: 86401},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2948, col: 3, offset: 86762},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 2948, col: 3, offset: 86762},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2948, col: 3, offset: 86762},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2948, col: 12, offset: 86771},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2948, col: 20, offset: 86779},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2948, col: 26, offset: 86785},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2948, col: 36, offset: 86795},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 2958, col: 1, offset: 86986},
			expr: &choiceExpr{
				pos: position{line: 2958, col: 18, offset: 87003},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2958, col: 18, offset: 87003},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 2958, col: 18, offset: 87003},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2958, col: 18, offset: 87003},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 32, offset: 87017},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2958, col: 40, offset: 87025},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 47, offset: 87032},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2958, col: 55, offset: 87040},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2958, col: 74, offset: 87059},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 93, offset: 87078},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 101, offset: 87086},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2973, col: 3, offset: 87451},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 2973, col: 3, offset: 87451},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2973, col: 3, offset: 87451},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2973, col: 17, offset: 87465},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2973, col: 25, offset: 87473},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2973, col: 31, offset: 87479},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2973, col: 41, offset: 87489},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 2983, col: 1, offset: 87684},
			expr: &choiceExpr{
				pos: position{line: 2983, col: 12, offset: 87695},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2983, col: 12, offset: 87695},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 2983, col: 12, offset: 87695},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2983, col: 12, offset: 87695},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 19, offset: 87702},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2983, col: 27, offset: 87710},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 34, offset: 87717},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2983, col: 42, offset: 87725},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2983, col: 61, offset: 87744},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 80, offset: 87763},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 88, offset: 87771},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2998, col: 3, offset: 88135},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 2998, col: 3, offset: 88135},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2998, col: 3, offset: 88135},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2998, col: 10, offset: 88142},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2998, col: 18, offset: 88150},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2998, col: 24, offset: 88156},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2998, col: 34, offset: 88166},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 3007, col: 1, offset: 88320},
			expr: &choiceExpr{
				pos: position{line: 3007, col: 14, offset: 88333},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3007, col: 14, offset: 88333},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 3007, col: 14, offset: 88333},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3007, col: 14, offset: 88333},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3007, col: 23, offset: 88342},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3007, col: 31, offset: 88350},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3007, col: 38, offset: 88357},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3007, col: 48, offset: 88367},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3007, col: 58, offset: 88377},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3017, col: 3, offset: 88606},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 3017, col: 3, offset: 88606},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3017, col: 3, offset: 88606},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3017, col: 12, offset: 88615},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3017, col: 20, offset: 88623},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3017, col: 26, offset: 88629},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3017, col: 36, offset: 88639},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 3026, col: 1, offset: 88790},
			expr: &actionExpr{
				pos: position{line: 3026, col: 25, offset: 88814},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3026, col: 25, offset: 88814},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3026, col: 39, offset: 88828},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3026, col: 39, offset: 88828},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3026, col: 67, offset: 88856},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 3030, col: 1, offset: 88919},
			expr: &actionExpr{
				pos: position{line: 3030, col: 30, offset: 88948},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 3030, col: 30, offset: 88948},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3030, col: 30, offset: 88948},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3030, col: 34, offset: 88952},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3030, col: 44, offset: 88962},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3030, col: 48, offset: 88966},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3030, col: 48, offset: 88966},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 3030, col: 67, offset: 88985},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3030, col: 87, offset: 89005},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3030, col: 93, offset: 89011},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 3043, col: 1, offset: 89245},
			expr: &actionExpr{
				pos: position{line: 3043, col: 32, offset: 89276},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3043, col: 32, offset: 89276},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3043, col: 38, offset: 89282},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 3056, col: 1, offset: 89499},
			expr: &actionExpr{
				pos: position{line: 3056, col: 26, offset: 89524},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 3056, col: 26, offset: 89524},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3056, col: 26, offset: 89524},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3056, col: 30, offset: 89528},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3056, col: 40, offset: 89538},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3056, col: 43, offset: 89541},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3056, col: 60, offset: 89558},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3056, col: 66, offset: 89564},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 3069, col: 1, offset: 89799},
			expr: &actionExpr{
				pos: position{line: 3069, col: 25, offset: 89823},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3069, col: 25, offset: 89823},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3069, col: 39, offset: 89837},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3069, col: 39, offset: 89837},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3069, col: 67, offset: 89865},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 3073, col: 1, offset: 89928},
			expr: &actionExpr{
				pos: position{line: 3073, col: 30, offset: 89957},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 3073, col: 30, offset: 89957},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3073, col: 30, offset: 89957},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3073, col: 34, offset: 89961},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3073, col: 44, offset: 89971},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3073, col: 47, offset: 89974},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3073, col: 64, offset: 89991},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3073, col: 70, offset: 89997},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 3085, col: 1, offset: 90230},
			expr: &actionExpr{
				pos: position{line: 3085, col: 32, offset: 90261},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3085, col: 32, offset: 90261},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3085, col: 38, offset: 90267},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 3099, col: 1, offset: 90598},
			expr: &actionExpr{
				pos: position{line: 3099, col: 18, offset: 90615},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3099, col: 18, offset: 90615},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3099, col: 18, offset: 90615},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3099, col: 24, offset: 90621},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3099, col: 34, offset: 90631},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3099, col: 39, offset: 90636},
								expr: &seqExpr{
									pos: position{line: 3099, col: 40, offset: 90637},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3099, col: 40, offset: 90637},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 3099, col: 46, offset: 90643},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 3119, col: 1, offset: 91406},
			expr: &actionExpr{
				pos: position{line: 3119, col: 14, offset: 91419},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 3119, col: 14, offset: 91419},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3119, col: 14, offset: 91419},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3119, col: 27, offset: 91432},
							expr: &charClassMatcher{
								pos:        position{line: 3119, col: 27, offset: 91432},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 3123, col: 1, offset: 91485},
			expr: &actionExpr{
				pos: position{line: 3123, col: 11, offset: 91495},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 3123, col: 11, offset: 91495},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3123, col: 16, offset: 91500},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3123, col: 16, offset: 91500},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3123, col: 31, offset: 91515},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 3127, col: 1, offset: 91556},
			expr: &actionExpr{
				pos: position{line: 3127, col: 17, offset: 91572},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 3127, col: 17, offset: 91572},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3127, col: 17, offset: 91572},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3127, col: 21, offset: 91576},
							expr: &charClassMatcher{
								pos:        position{line: 3127, col: 21, offset: 91576},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3127, col: 27, offset: 91582},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 3132, col: 1, offset: 91693},
			expr: &actionExpr{
				pos: position{line: 3132, col: 12, offset: 91704},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 3132, col: 13, offset: 91705},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3132, col: 13, offset: 91705},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 3132, col: 22, offset: 91714},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 3137, col: 1, offset: 91808},
			expr: &actionExpr{
				pos: position{line: 3137, col: 19, offset: 91826},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3137, col: 19, offset: 91826},
					expr: &choiceExpr{
						pos: position{line: 3137, col: 20, offset: 91827},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 3137, col: 20, offset: 91827},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 3137, col: 27, offset: 91834},
								exprs: []any{
									&notExpr{
										pos: position{line: 3137, col: 27, offset: 91834},
										expr: &choiceExpr{
											pos: position{line: 3137, col: 29, offset: 91836},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3137, col: 29, offset: 91836},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3137, col: 43, offset: 91850},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3137, col: 49, offset: 91856},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3137, col: 54, offset: 91861,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 3144, col: 1, offset: 92035},
			expr: &actionExpr{
				pos: position{line: 3144, col: 18, offset: 92052},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3144, col: 18, offset: 92052},
					expr: &charClassMatcher{
						pos:        position{line: 3144, col: 18, offset: 92052},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 3148, col: 1, offset: 92103},
			expr: &actionExpr{
				pos: position{line: 3148, col: 11, offset: 92113},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 3148, col: 11, offset: 92113},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 3148, col: 18, offset: 92120},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 3154, col: 1, offset: 92309},
			expr: &actionExpr{
				pos: position{line: 3154, col: 19, offset: 92327},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 3154, col: 19, offset: 92327},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3154, col: 19, offset: 92327},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 3154, col: 27, offset: 92335},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3154, col: 27, offset: 92335},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 3154, col: 43, offset: 92351},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 3154, col: 60, offset: 92368},
							expr: &choiceExpr{
								pos: position{line: 3154, col: 62, offset: 92370},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3154, col: 62, offset: 92370},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 3154, col: 70, offset: 92378},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 3154, col: 76, offset: 92384},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 3154, col: 82, offset: 92390},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 3154, col: 88, offset: 92396},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 3160, col: 1, offset: 92525},
			expr: &actionExpr{
				pos: position{line: 3160, col: 18, offset: 92542},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 3160, col: 18, offset: 92542},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3160, col: 18, offset: 92542},
							expr: &charClassMatcher{
								pos:        position{line: 3160, col: 18, offset: 92542},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3160, col: 24, offset: 92548},
							expr: &charClassMatcher{
								pos:        position{line: 3160, col: 24, offset: 92548},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 3160, col: 31, offset: 92555},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 3160, col: 35, offset: 92559},
							expr: &charClassMatcher{
								pos:        position{line: 3160, col: 35, offset: 92559},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 3165, col: 1, offset: 92654},
			expr: &actionExpr{
				pos: position{line: 3165, col: 20, offset: 92673},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3165, col: 20, offset: 92673},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3165, col: 20, offset: 92673},
							expr: &charClassMatcher{
								pos:        position{line: 3165, col: 20, offset: 92673},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 3165, col: 26, offset: 92679},
							expr: &charClassMatcher{
								pos:        position{line: 3165, col: 26, offset: 92679},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 3169, col: 1, offset: 92722},
			expr: &actionExpr{
				pos: position{line: 3169, col: 21, offset: 92742},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 3169, col: 21, offset: 92742},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3169, col: 21, offset: 92742},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3169, col: 36, offset: 92757},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3169, col: 40, offset: 92761},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3169, col: 40, offset: 92761},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 3169, col: 46, offset: 92767},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3169, col: 52, offset: 92773},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 3177, col: 1, offset: 92954},
			expr: &actionExpr{
				pos: position{line: 3177, col: 23, offset: 92976},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 3177, col: 23, offset: 92976},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3177, col: 23, offset: 92976},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3177, col: 38, offset: 92991},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3177, col: 42, offset: 92995},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3177, col: 42, offset: 92995},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 3177, col: 49, offset: 93002},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 3177, col: 55, offset: 93008},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 3177, col: 62, offset: 93015},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3177, col: 67, offset: 93020},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 3185, col: 1, offset: 93203},
			expr: &choiceExpr{
				pos: position{line: 3185, col: 25, offset: 93227},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3185, col: 25, offset: 93227},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 3185, col: 25, offset: 93227},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3185, col: 28, offset: 93230},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3188, col: 3, offset: 93272},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 3188, col: 3, offset: 93272},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3188, col: 6, offset: 93275},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 3192, col: 1, offset: 93318},
			expr: &actionExpr{
				pos: position{line: 3192, col: 11, offset: 93328},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 3192, col: 11, offset: 93328},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3192, col: 11, offset: 93328},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3192, col: 26, offset: 93343},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3192, col: 30, offset: 93347},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 3196, col: 1, offset: 93387},
			expr: &actionExpr{
				pos: position{line: 3196, col: 12, offset: 93398},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 3196, col: 12, offset: 93398},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3196, col: 12, offset: 93398},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3196, col: 27, offset: 93413},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3196, col: 31, offset: 93417},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 3200, col: 1, offset: 93457},
			expr: &actionExpr{
				pos: position{line: 3200, col: 10, offset: 93466},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 3200, col: 10, offset: 93466},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3200, col: 10, offset: 93466},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3200, col: 25, offset: 93481},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3200, col: 29, offset: 93485},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 3204, col: 1, offset: 93525},
			expr: &actionExpr{
				pos: position{line: 3204, col: 10, offset: 93534},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 3204, col: 10, offset: 93534},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3204, col: 10, offset: 93534},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3204, col: 25, offset: 93549},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3204, col: 29, offset: 93553},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 3209, col: 1, offset: 93617},
			expr: &actionExpr{
				pos: position{line: 3209, col: 11, offset: 93627},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 3209, col: 12, offset: 93628},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3209, col: 12, offset: 93628},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 3209, col: 24, offset: 93640},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 3209, col: 35, offset: 93651},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 3209, col: 44, offset: 93660},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 3209, col: 52, offset: 93668},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 3213, col: 1, offset: 93709},
			expr: &actionExpr{
				pos: position{line: 3213, col: 11, offset: 93719},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 3213, col: 12, offset: 93720},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3213, col: 12, offset: 93720},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 3213, col: 24, offset: 93732},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 3213, col: 35, offset: 93743},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 3213, col: 44, offset: 93752},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 3213, col: 52, offset: 93760},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 3217, col: 1, offset: 93801},
			expr: &actionExpr{
				pos: position{line: 3217, col: 9, offset: 93809},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 3217, col: 10, offset: 93810},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3217, col: 10, offset: 93810},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 3217, col: 20, offset: 93820},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 3217, col: 29, offset: 93829},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 3217, col: 37, offset: 93837},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 3217, col: 44, offset: 93844},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 3221, col: 1, offset: 93883},
			expr: &actionExpr{
				pos: position{line: 3221, col: 8, offset: 93890},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 3221, col: 9, offset: 93891},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3221, col: 9, offset: 93891},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 3221, col: 18, offset: 93900},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 3221, col: 26, offset: 93908},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 3225, col: 1, offset: 93946},
			expr: &actionExpr{
				pos: position{line: 3225, col: 9, offset: 93954},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 3225, col: 10, offset: 93955},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3225, col: 10, offset: 93955},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 3225, col: 20, offset: 93965},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 3225, col: 29, offset: 93974},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 3229, col: 1, offset: 94013},
			expr: &actionExpr{
				pos: position{line: 3229, col: 10, offset: 94022},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 3229, col: 11, offset: 94023},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3229, col: 11, offset: 94023},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 3229, col: 22, offset: 94034},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 3229, col: 32, offset: 94044},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 3233, col: 1, offset: 94086},
			expr: &actionExpr{
				pos: position{line: 3233, col: 12, offset: 94097},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 3233, col: 13, offset: 94098},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3233, col: 13, offset: 94098},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 3233, col: 26, offset: 94111},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 3233, col: 38, offset: 94123},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 3233, col: 47, offset: 94132},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 3233, col: 55, offset: 94140},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 3238, col: 1, offset: 94274},
			expr: &actionExpr{
				pos: position{line: 3238, col: 15, offset: 94288},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 3238, col: 16, offset: 94289},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3238, col: 16, offset: 94289},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 3238, col: 23, offset: 94296},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 3238, col: 30, offset: 94303},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 3238, col: 37, offset: 94310},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 3247, col: 1, offset: 94533},
			expr: &actionExpr{
				pos: position{line: 3247, col: 21, offset: 94553},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 3247, col: 21, offset: 94553},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3247, col: 21, offset: 94553},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3247, col: 26, offset: 94558},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 3247, col: 42, offset: 94574},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 3247, col: 53, offset: 94585},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 3256, col: 1, offset: 94891},
			expr: &actionExpr{
				pos: position{line: 3256, col: 23, offset: 94913},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 3256, col: 23, offset: 94913},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 3256, col: 34, offset: 94924},
						expr: &ruleRefExpr{
							pos:  position{line: 3256, col: 34, offset: 94924},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 3271, col: 1, offset: 95315},
			expr: &actionExpr{
				pos: position{line: 3271, col: 37, offset: 95351},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3271, col: 37, offset: 95351},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3271, col: 37, offset: 95351},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3271, col: 43, offset: 95357},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3271, col: 71, offset: 95385},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3271, col: 76, offset: 95390},
								expr: &seqExpr{
									pos: position{line: 3271, col: 77, offset: 95391},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3271, col: 77, offset: 95391},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3271, col: 83, offset: 95397},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 3306, col: 1, offset: 96386},
			expr: &actionExpr{
				pos: position{line: 3306, col: 32, offset: 96417},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 3306, col: 32, offset: 96417},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3306, col: 40, offset: 96425},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3306, col: 40, offset: 96425},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 3306, col: 70, offset: 96455},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3306, col: 89, offset: 96474},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 3312, col: 1, offset: 96620},
			expr: &actionExpr{
				pos: position{line: 3312, col: 32, offset: 96651},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3312, col: 32, offset: 96651},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3312, col: 32, offset: 96651},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3312, col: 38, offset: 96657},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 3312, col: 48, offset: 96667},
							expr: &ruleRefExpr{
								pos:  position{line: 3312, col: 50, offset: 96669},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 3312, col: 57, offset: 96676},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3312, col: 62, offset: 96681},
								expr: &seqExpr{
									pos: position{line: 3312, col: 63, offset: 96682},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3312, col: 63, offset: 96682},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3312, col: 69, offset: 96688},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 3312, col: 79, offset: 96698},
											expr: &ruleRefExpr{
												pos:  position{line: 3312, col: 81, offset: 96700},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 3330, col: 1, offset: 97124},
			expr: &actionExpr{
				pos: position{line: 3330, col: 21, offset: 97144},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3330, col: 21, offset: 97144},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3330, col: 21, offset: 97144},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3330, col: 34, offset: 97157},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3330, col: 40, offset: 97163},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3330, col: 48, offset: 97171},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 3340, col: 1, offset: 97409},
			expr: &actionExpr{
				pos: position{line: 3340, col: 19, offset: 97427},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3340, col: 19, offset: 97427},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3340, col: 19, offset: 97427},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3340, col: 30, offset: 97438},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3340, col: 36, offset: 97444},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3340, col: 44, offset: 97452},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 3351, col: 1, offset: 97721},
			expr: &actionExpr{
				pos: position{line: 3351, col: 28, offset: 97748},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 3351, col: 28, offset: 97748},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 3351, col: 37, offset: 97757},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3351, col: 37, offset: 97757},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3351, col: 63, offset: 97783},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 3351, col: 81, offset: 97801},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 3355, col: 1, offset: 97849},
			expr: &actionExpr{
				pos: position{line: 3355, col: 28, offset: 97876},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 3355, col: 28, offset: 97876},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3355, col: 33, offset: 97881},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3355, col: 33, offset: 97881},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3355, col: 64, offset: 97912},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 3359, col: 1, offset: 97972},
			expr: &actionExpr{
				pos: position{line: 3359, col: 38, offset: 98009},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 3359, col: 38, offset: 98009},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3359, col: 38, offset: 98009},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 3359, col: 42, offset: 98013},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 3359, col: 55, offset: 98026},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 3359, col: 68, offset: 98039},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 3367, col: 1, offset: 98178},
			expr: &actionExpr{
				pos: position{line: 3367, col: 21, offset: 98198},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 3367, col: 21, offset: 98198},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3367, col: 21, offset: 98198},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3367, col: 25, offset: 98202},
							expr: &charClassMatcher{
								pos:        position{line: 3367, col: 25, offset: 98202},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3367, col: 44, offset: 98221},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 3372, col: 1, offset: 98332},
			expr: &actionExpr{
				pos: position{line: 3372, col: 33, offset: 98364},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3372, col: 33, offset: 98364},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 3372, col: 37, offset: 98368},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 3380, col: 1, offset: 98523},
			expr: &actionExpr{
				pos: position{line: 3380, col: 22, offset: 98544},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 3380, col: 22, offset: 98544},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 3380, col: 27, offset: 98549},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 3390, col: 1, offset: 98721},
			expr: &actionExpr{
				pos: position{line: 3390, col: 20, offset: 98740},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 3390, col: 20, offset: 98740},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3390, col: 20, offset: 98740},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3390, col: 27, offset: 98747},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3390, col: 42, offset: 98762},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 3390, col: 50, offset: 98770},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 3390, col: 60, offset: 98780},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3390, col: 69, offset: 98789},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 3400, col: 1, offset: 98970},
			expr: &choiceExpr{
				pos: position{line: 3400, col: 12, offset: 98981},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3400, col: 12, offset: 98981},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 24, offset: 98993},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 36, offset: 99005},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 49, offset: 99018},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 61, offset: 99030},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 81, offset: 99050},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 92, offset: 99061},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 103, offset: 99072},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 113, offset: 99082},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 123, offset: 99092},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 134, offset: 99103},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 147, offset: 99116},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 163, offset: 99132},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 181, offset: 99150},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 3400, col: 193, offset: 99162},
						name: "CMD_SORT",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 3401, col: 1, offset: 99172},
			expr: &seqExpr{
				pos: position{line: 3401, col: 15, offset: 99186},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3401, col: 15, offset: 99186},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3401, col: 24, offset: 99195},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 3402, col: 1, offset: 99201},
			expr: &seqExpr{
				pos: position{line: 3402, col: 14, offset: 99214},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3402, col: 14, offset: 99214},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3402, col: 22, offset: 99222},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 3403, col: 1, offset: 99228},
			expr: &seqExpr{
				pos: position{line: 3403, col: 14, offset: 99241},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3403, col: 14, offset: 99241},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3403, col: 22, offset: 99249},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 3404, col: 1, offset: 99255},
			expr: &seqExpr{
				pos: position{line: 3404, col: 15, offset: 99269},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3404, col: 15, offset: 99269},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3404, col: 24, offset: 99278},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 3405, col: 1, offset: 99284},
			expr: &seqExpr{
				pos: position{line: 3405, col: 14, offset: 99297},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3405, col: 14, offset: 99297},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3405, col: 22, offset: 99305},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 3406, col: 1, offset: 99311},
			expr: &litMatcher{
				pos:        position{line: 3406, col: 22, offset: 99332},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 3407, col: 1, offset: 99339},
			expr: &seqExpr{
				pos: position{line: 3407, col: 13, offset: 99351},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3407, col: 13, offset: 99351},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3407, col: 31, offset: 99369},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 3408, col: 1, offset: 99375},
			expr: &seqExpr{
				pos: position{line: 3408, col: 13, offset: 99387},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3408, col: 13, offset: 99387},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3408, col: 20, offset: 99394},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 3409, col: 1, offset: 99400},
			expr: &seqExpr{
				pos: position{line: 3409, col: 12, offset: 99411},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3409, col: 12, offset: 99411},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3409, col: 18, offset: 99417},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 3410, col: 1, offset: 99423},
			expr: &seqExpr{
				pos: position{line: 3410, col: 13, offset: 99435},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3410, col: 13, offset: 99435},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3410, col: 20, offset: 99442},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 3411, col: 1, offset: 99448},
			expr: &litMatcher{
				pos:        position{line: 3411, col: 12, offset: 99459},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 3412, col: 1, offset: 99465},
			expr: &litMatcher{
				pos:        position{line: 3412, col: 13, offset: 99477},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 3413, col: 1, offset: 99484},
			expr: &seqExpr{
				pos: position{line: 3413, col: 15, offset: 99498},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3413, col: 15, offset: 99498},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3413, col: 24, offset: 99507},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 3414, col: 1, offset: 99513},
			expr: &seqExpr{
				pos: position{line: 3414, col: 18, offset: 99530},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3414, col: 18, offset: 99530},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3414, col: 30, offset: 99542},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 3415, col: 1, offset: 99548},
			expr: &litMatcher{
				pos:        position{line: 3415, col: 13, offset: 99560},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 3416, col: 1, offset: 99567},
			expr: &seqExpr{
				pos: position{line: 3416, col: 20, offset: 99586},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3416, col: 20, offset: 99586},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3416, col: 34, offset: 99600},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 3417, col: 1, offset: 99606},
			expr: &litMatcher{
				pos:        position{line: 3417, col: 14, offset: 99619},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 3418, col: 1, offset: 99627},
			expr: &seqExpr{
				pos: position{line: 3418, col: 21, offset: 99647},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3418, col: 21, offset: 99647},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3418, col: 27, offset: 99653},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3418, col: 36, offset: 99662},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 3419, col: 1, offset: 99668},
			expr: &seqExpr{
				pos: position{line: 3419, col: 16, offset: 99683},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 3419, col: 16, offset: 99683},
						expr: &ruleRefExpr{
							pos:  position{line: 3419, col: 16, offset: 99683},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 3419, col: 23, offset: 99690},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 3419, col: 27, offset: 99694},
						expr: &ruleRefExpr{
							pos:  position{line: 3419, col: 27, offset: 99694},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 3422, col: 1, offset: 99805},
			expr: &choiceExpr{
				pos: position{line: 3422, col: 16, offset: 99820},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3422, col: 16, offset: 99820},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3422, col: 47, offset: 99851},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 3422, col: 55, offset: 99859},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 16, offset: 99882},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 26, offset: 99892},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 34, offset: 99900},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 42, offset: 99908},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 50, offset: 99916},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 58, offset: 99924},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 3423, col: 66, offset: 99932},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 16, offset: 99954},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 26, offset: 99964},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 34, offset: 99972},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 42, offset: 99980},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 50, offset: 99988},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 58, offset: 99996},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 66, offset: 100004},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 3424, col: 74, offset: 100012},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 3425, col: 1, offset: 100018},
			expr: &choiceExpr{
				pos: position{line: 3425, col: 16, offset: 100033},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3425, col: 16, offset: 100033},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3425, col: 30, offset: 100047},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 3425, col: 36, offset: 100053},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 3429, col: 1, offset: 100209},
			expr: &seqExpr{
				pos: position{line: 3429, col: 8, offset: 100216},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3429, col: 8, offset: 100216},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3429, col: 14, offset: 100222},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 3430, col: 1, offset: 100228},
			expr: &seqExpr{
				pos: position{line: 3430, col: 7, offset: 100234},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3430, col: 7, offset: 100234},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3430, col: 13, offset: 100240},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3430, col: 18, offset: 100245},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 3431, col: 1, offset: 100251},
			expr: &seqExpr{
				pos: position{line: 3431, col: 8, offset: 100258},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3431, col: 8, offset: 100258},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3431, col: 14, offset: 100264},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3431, col: 20, offset: 100270},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 3432, col: 1, offset: 100276},
			expr: &seqExpr{
				pos: position{line: 3432, col: 9, offset: 100284},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3432, col: 9, offset: 100284},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3432, col: 24, offset: 100299},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3432, col: 28, offset: 100303},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 3433, col: 1, offset: 100318},
			expr: &seqExpr{
				pos: position{line: 3433, col: 7, offset: 100324},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3433, col: 7, offset: 100324},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3433, col: 13, offset: 100330},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3433, col: 19, offset: 100336},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 3434, col: 1, offset: 100362},
			expr: &seqExpr{
				pos: position{line: 3434, col: 7, offset: 100368},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3434, col: 7, offset: 100368},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3434, col: 13, offset: 100374},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3434, col: 19, offset: 100380},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 3436, col: 1, offset: 100407},
			expr: &seqExpr{
				pos: position{line: 3436, col: 10, offset: 100416},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3436, col: 10, offset: 100416},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3436, col: 25, offset: 100431},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3436, col: 29, offset: 100435},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 3437, col: 1, offset: 100450},
			expr: &seqExpr{
				pos: position{line: 3437, col: 10, offset: 100459},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3437, col: 10, offset: 100459},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3437, col: 25, offset: 100474},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3437, col: 29, offset: 100478},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 3438, col: 1, offset: 100493},
			expr: &seqExpr{
				pos: position{line: 3438, col: 12, offset: 100504},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3438, col: 12, offset: 100504},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3438, col: 16, offset: 100508},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 3439, col: 1, offset: 100523},
			expr: &seqExpr{
				pos: position{line: 3439, col: 12, offset: 100534},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3439, col: 12, offset: 100534},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3439, col: 27, offset: 100549},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 3441, col: 1, offset: 100554},
			expr: &notExpr{
				pos: position{line: 3441, col: 8, offset: 100561},
				expr: &anyMatcher{
					line: 3441, col: 9, offset: 100562,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 3442, col: 1, offset: 100564},
			expr: &choiceExpr{
				pos: position{line: 3442, col: 15, offset: 100578},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 3442, col: 15, offset: 100578},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 3442, col: 21, offset: 100584},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 3442, col: 28, offset: 100591},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 3442, col: 35, offset: 100598},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 3443, col: 1, offset: 100603},
			expr: &choiceExpr{
				pos: position{line: 3443, col: 10, offset: 100612},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 3443, col: 11, offset: 100613},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 3443, col: 11, offset: 100613},
								expr: &ruleRefExpr{
									pos:  position{line: 3443, col: 11, offset: 100613},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 3443, col: 23, offset: 100625},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 3443, col: 31, offset: 100633},
								expr: &ruleRefExpr{
									pos:  position{line: 3443, col: 31, offset: 100633},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 3443, col: 46, offset: 100648},
						expr: &ruleRefExpr{
							pos:  position{line: 3443, col: 46, offset: 100648},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 3444, col: 1, offset: 100660},
			expr: &seqExpr{
				pos: position{line: 3444, col: 12, offset: 100671},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3444, col: 12, offset: 100671},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 3444, col: 18, offset: 100677},
						expr: &seqExpr{
							pos: position{line: 3444, col: 19, offset: 100678},
							exprs: []any{
								&notExpr{
									pos: position{line: 3444, col: 19, offset: 100678},
									expr: &litMatcher{
										pos:        position{line: 3444, col: 21, offset: 100680},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 3444, col: 28, offset: 100687,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 3444, col: 32, offset: 100691},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 3445, col: 1, offset: 100697},
			expr: &choiceExpr{
				pos: position{line: 3445, col: 20, offset: 100716},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3445, col: 20, offset: 100716},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3445, col: 28, offset: 100724},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 3446, col: 1, offset: 100727},
			expr: &choiceExpr{
				pos: position{line: 3446, col: 19, offset: 100745},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3446, col: 19, offset: 100745},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 3446, col: 27, offset: 100753},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr98(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr98(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr111(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr111(stack["format"], stack["rest"])
}

func (c *current) onTextExpr123(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["containInternalFields"])
}

func (c *current) onTextExpr135(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr143(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr143(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr157(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr157(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr168(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr168() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr168(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr183(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr183() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr183(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr199(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr199() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr199(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr215(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr215(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr243(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr243() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr243(stack["filter"])
}

func (c *current) onTextExpr251(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr251() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr251(stack["valueExpr"])
}

func (c *current) onTextExpr258(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr258() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr258(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr271(val, path any) (any, error) {
	return &structs.TextExpr{
		Op:    "spath",
		Val:   val.(*structs.ValueExpr),
		Param: path.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr271(stack["val"], stack["path"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr19(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr19(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr30(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["opName"])
}

func (c *current) onNumericEvalExpr39(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr39(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr51(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr51(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr59(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr59(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
